// ============================================
// POKER CLUB MINI APP - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø V3.0
// ============================================

const tg = window.Telegram?.WebApp || {};
const API_BASE = 'https://poker-club-server-1.onrender.com/api';

// –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const appData = {
    currentUser: null,
    isAdmin: false,
    registeredUsers: [],
    tournaments: [],
    games: [],
    selectedTournamentId: null
};

// ============================================
// API –ú–ï–¢–û–î–´
// ============================================

const API = {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    async getUsers() {
        console.log('üîç API.getUsers()');
        const response = await fetch(`${API_BASE}/users`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        const data = await response.json();
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', data.length);
        return data;
    },

    async getUserByTelegramId(telegramId) {
        const response = await fetch(`${API_BASE}/users/telegram/${telegramId}`);
        if (!response.ok) return null;
        return await response.json();
    },

    async createUser(userData) {
        const response = await fetch(`${API_BASE}/users`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(userData)
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return await response.json();
    },

    async updateUser(userId, userData) {
        const response = await fetch(`${API_BASE}/users/${userId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(userData)
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return await response.json();
    },

    // –¢—É—Ä–Ω–∏—Ä—ã
    async getBigTournaments() {
        console.log('üîç API.getBigTournaments()');
        const response = await fetch(`${API_BASE}/big-tournaments`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        const data = await response.json();
        console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä—ã:', data.length);
        return data;
    },

    async createBigTournament(tournamentData) {
        console.log('üì§ API.createBigTournament:', tournamentData);
        const response = await fetch(`${API_BASE}/big-tournaments`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(tournamentData)
        });
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞');
        }
        const result = await response.json();
        console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω:', result);
        return result;
    },

    // –ò–≥—Ä—ã
    async getGames(tournamentId = null) {
        console.log('üîç API.getGames(), tournamentId:', tournamentId);
        const url = tournamentId 
            ? `${API_BASE}/games?tournamentId=${tournamentId}`
            : `${API_BASE}/games`;
        const response = await fetch(url);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä');
        const data = await response.json();
        console.log('‚úÖ –ò–≥—Ä—ã:', data.length);
        return data;
    },

    async createGame(gameData) {
        console.log('üì§ API.createGame:', gameData);
        const response = await fetch(`${API_BASE}/games`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(gameData)
        });
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã');
        }
        const result = await response.json();
        console.log('‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:', result);
        return result;
    },

    async updateGameStatus(gameId, status) {
        const response = await fetch(`${API_BASE}/games/${gameId}/status`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status })
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã');
        return await response.json();
    },

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—ã
    async registerForGame(gameId, userId) {
        console.log('üì§ API.registerForGame:', { gameId, userId });
        const response = await fetch(`${API_BASE}/game-registrations`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ gameId, userId })
        });
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        }
        return await response.json();
    },

    async cancelGameRegistration(gameId, userId) {
        console.log('üì§ API.cancelGameRegistration:', { gameId, userId });
        const response = await fetch(`${API_BASE}/game-registrations/${gameId}/${userId}`, {
            method: 'DELETE'
        });
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã');
        }
        return await response.json();
    },

    async markGamePayment(gameId, userId, isPaid) {
        console.log('üì§ API.markGamePayment:', { gameId, userId, isPaid });
        const response = await fetch(`${API_BASE}/game-registrations/${gameId}/${userId}/payment`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ isPaid })
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã');
        return await response.json();
    },

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä
    async saveGameResults(gameId, results) {
        console.log('üì§ API.saveGameResults:', { gameId, results });
        const response = await fetch(`${API_BASE}/game-results/${gameId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ results })
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        return await response.json();
    },

    async getGameResults(gameId) {
        const response = await fetch(`${API_BASE}/game-results/${gameId}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        return await response.json();
    },

    // –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    async getTournamentStandings(tournamentId) {
        console.log('üîç API.getTournamentStandings:', tournamentId);
        const response = await fetch(`${API_BASE}/tournament-standings/${tournamentId}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã');
        const data = await response.json();
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', data.length);
        return data;
    },

    // –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserGameHistory(userId, tournamentId = null) {
        const url = tournamentId
            ? `${API_BASE}/user-game-history/${userId}?tournamentId=${tournamentId}`
            : `${API_BASE}/user-game-history/${userId}`;
        const response = await fetch(url);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
        return await response.json();
    },

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    async getStats() {
        const response = await fetch(`${API_BASE}/admin/stats`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        return await response.json();
    }
};

// ============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ============================================

async function initApp() {
    try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        if (tg && tg.expand) {
            try {
                tg.ready();
                tg.expand();
                tg.enableClosingConfirmation();
            } catch (e) {
                console.warn('Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e);
            }
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        applyTheme();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        await checkAuthentication();

        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
}

async function checkAuthentication() {
    try {
        const user = tg.initDataUnsafe?.user;
        
        if (!user) {
            console.log('üë§ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
            showLoginModal();
            return;
        }

        console.log('üë§ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
        const existingUser = await API.getUserByTelegramId(user.id);

        if (existingUser) {
            appData.currentUser = existingUser;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞: —Ä–æ–ª—å admin, –≤–∞—à ID –∏–ª–∏ nickname admin
            appData.isAdmin = existingUser.role === 'admin' || 
                             existingUser.telegram_id === '609464085' || 
                             existingUser.gameNickname === 'admin';
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', existingUser.gameNickname, 'Admin:', appData.isAdmin);
            await loadInitialData();
        } else {
            console.log('üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
            showRegistrationModal();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        showLoginModal();
    }
}

async function loadInitialData() {
    try {
        console.log('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        await loadUserData();
        updateNavigation();
        console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// ============================================
// –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
// ============================================

async function loadUserData() {
    try {
        if (!appData.currentUser) return;

        console.log('üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        const elements = {
            userName: document.getElementById('userName'),
            userRank: document.getElementById('userRank'),
            profileName: document.getElementById('profileName'),
            userAvatar: document.getElementById('userAvatar'),
            profileAvatar: document.getElementById('profileAvatar')
        };

        if (elements.userName) elements.userName.textContent = appData.currentUser.gameNickname;
        if (elements.userRank) elements.userRank.textContent = '–ò–≥—Ä–æ–∫';
        if (elements.profileName) elements.profileName.textContent = appData.currentUser.gameNickname;

        const avatar = appData.currentUser.avatar || 'üë§';
        if (elements.userAvatar) elements.userAvatar.textContent = avatar;
        if (elements.profileAvatar) elements.profileAvatar.textContent = avatar;

        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

async function loadTournaments() {
    try {
        console.log('üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤...');
        appData.tournaments = await API.getBigTournaments();
        renderTournaments();
        console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', error);
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤: ' + error.message);
    }
}

async function loadGames(tournamentId = null) {
    try {
        console.log('üéÆ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä...');
        appData.games = await API.getGames(tournamentId);
        displayGames(appData.games);
        renderCalendar();
        await loadMyTournamentStanding();
        console.log('‚úÖ –ò–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä:', error);
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä: ' + error.message);
    }
}

async function loadAllUsers() {
    try {
        console.log('üë• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        appData.registeredUsers = await API.getUsers();
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', appData.registeredUsers.length);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
}

async function loadAdminData() {
    try {
        if (!appData.isAdmin) return;

        console.log('üëë –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∞...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await loadAllUsers();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const stats = await API.getStats();
        
        document.getElementById('totalUsers').textContent = stats.totalUsers || 0;
        document.getElementById('totalTournaments').textContent = stats.totalTournaments || 0;
        document.getElementById('activeGames').textContent = stats.activeGames || 0;
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∞:', error);
    }
}

// ============================================
// –¢–£–†–ù–ò–†–´
// ============================================

function renderTournaments() {
    const container = document.getElementById('tournamentsList');
    if (!container) return;

    if (appData.tournaments.length === 0) {
        container.innerHTML = `
            <div style="text-align: center; padding: 40px; color: #7f8c8d;">
                <div style="font-size: 48px; margin-bottom: 16px;">üèÜ</div>
                <p>–¢—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
            </div>
        `;
        return;
    }

    container.innerHTML = appData.tournaments.map(tournament => `
        <div class="tournament-card">
            <div class="tournament-header">
                <h3>${tournament.name}</h3>
                <span class="tournament-status ${tournament.status}">${getStatusText(tournament.status)}</span>
            </div>
            <div class="tournament-info">
                <p>${tournament.description || '–¢—É—Ä–Ω–∏—Ä –ø–æ–∫–µ—Ä–Ω–æ–≥–æ –∫–ª—É–±–∞'}</p>
                <div class="info-item">
                    <i class="fas fa-calendar"></i>
                    <span>–ù–∞—á–∞–ª–æ: ${formatDate(tournament.start_date)}</span>
                </div>
                <div class="info-item">
                    <i class="fas fa-trophy"></i>
                    <span>–¢–æ–ø-${tournament.top_players_count} –≤ —Ñ–∏–Ω–∞–ª</span>
                </div>
            </div>
            <div class="tournament-actions">
                <button class="btn-join" onclick="selectTournament(${tournament.id})">
                    <i class="fas fa-eye"></i>
                    <span>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</span>
                </button>
                ${appData.isAdmin ? `
                    <button class="btn-secondary" onclick="showTournamentStandings(${tournament.id})">
                        <i class="fas fa-list"></i>
                        <span>–¢–∞–±–ª–∏—Ü–∞</span>
                    </button>
                ` : ''}
            </div>
        </div>
    `).join('');
}

async function createTournament() {
    if (!appData.isAdmin) return;

    const name = document.getElementById('tournamentName').value.trim();
    const description = document.getElementById('tournamentDescription').value.trim();

    if (!name) {
        showAlert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞!');
        return;
    }

    try {
        const tournamentData = {
            name,
            description,
            startDate: new Date().toISOString(),
            topPlayersCount: 20
        };

        console.log('üì§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:', tournamentData);

        await API.createBigTournament(tournamentData);
        
        showAlert('–¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
        closeModal('addTournamentModal');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã
        await loadTournaments();
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('tournamentName').value = '';
        document.getElementById('tournamentDescription').value = '';
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', error);
        showAlert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: ' + error.message);
    }
}

function selectTournament(tournamentId) {
    appData.selectedTournamentId = tournamentId;
    switchTab('games');
    loadGames(tournamentId);
}

// ============================================
// –ò–ì–†–´
// ============================================

function displayGames(games) {
    const gamesList = document.getElementById('gamesList');
    if (!gamesList) return;

    if (games.length === 0) {
        gamesList.innerHTML = `
            <div style="text-align: center; padding: 40px; color: #7f8c8d;">
                <div style="font-size: 48px; margin-bottom: 16px;">üéÆ</div>
                <p>–ò–≥—Ä –ø–æ–∫–∞ –Ω–µ—Ç</p>
            </div>
        `;
        return;
    }

    gamesList.innerHTML = games.map(game => createGameCard(game)).join('');
}

function createGameCard(game) {
    const gameDate = new Date(game.date);
    const participantsCount = game.participants?.length || 0;
    const isRegistered = game.participants?.some(p => p.user_id === appData.currentUser?.id);

    return `
        <div class="game-card">
            <div class="game-header">
                <h4>–ò–≥—Ä–∞ #${game.game_number}</h4>
                <span class="game-status ${game.status}">${getGameStatusText(game.status)}</span>
            </div>
            <div class="game-info">
                <div class="info-item">
                    <i class="fas fa-calendar"></i>
                    <span>${formatDate(game.date)}</span>
                </div>
                <div class="info-item">
                    <i class="fas fa-users"></i>
                    <span>${participantsCount}/${game.max_players} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                </div>
                <div class="info-item">
                    <i class="fas fa-money-bill"></i>
                    <span>–í–∑–Ω–æ—Å: ${game.buyin_amount} ‚ÇΩ</span>
                </div>
            </div>
            <div class="game-actions">
                ${createGameActions(game, isRegistered)}
            </div>
        </div>
    `;
}

function createGameActions(game, isRegistered) {
    const now = new Date();
    const gameDate = new Date(game.date);
    const isUpcoming = gameDate > now && game.status === 'upcoming';

    let actions = '';

    if (isUpcoming) {
        if (isRegistered) {
            actions += `
                <button class="game-btn danger" onclick="cancelGameRegistration(${game.id})">
                    <i class="fas fa-times"></i>
                    <span>–û—Ç–º–µ–Ω–∏—Ç—å</span>
                </button>
            `;
        } else {
            actions += `
                <button class="game-btn primary" onclick="registerForGame(${game.id})">
                    <i class="fas fa-plus"></i>
                    <span>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è</span>
                </button>
            `;
        }
    }

    if (appData.isAdmin) {
        actions += `
            <button class="game-btn secondary" onclick="showGameDetails(${game.id})">
                <i class="fas fa-eye"></i>
                <span>–î–µ—Ç–∞–ª–∏</span>
            </button>
        `;
        
        if (game.status === 'finished' || game.status === 'in_progress') {
            actions += `
                <button class="game-btn secondary" onclick="showGameResults(${game.id})">
                    <i class="fas fa-trophy"></i>
                    <span>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</span>
                </button>
            `;
        }
    }

    return actions;
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—É
async function registerForGame(gameId) {
    try {
        await API.registerForGame(gameId, appData.currentUser.id);
        showAlert('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É!');
        await loadGames(appData.selectedTournamentId);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        showAlert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function cancelGameRegistration(gameId) {
    try {
        await API.cancelGameRegistration(gameId, appData.currentUser.id);
        showAlert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
        await loadGames(appData.selectedTournamentId);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã:', error);
        showAlert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// ============================================
// –ö–ê–õ–ï–ù–î–ê–†–¨ –ò–ì–†
// ============================================

function renderCalendar() {
    const calendarGrid = document.getElementById('calendarGrid');
    if (!calendarGrid) return;

    const now = new Date();
    const currentMonth = now.getMonth();
    const currentYear = now.getFullYear();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    const firstDay = new Date(currentYear, currentMonth, 1);
    const lastDay = new Date(currentYear, currentMonth + 1, 0);
    
    // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    const daysOfWeek = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    
    let html = '<div class="calendar-header">';
    daysOfWeek.forEach(day => {
        html += `<div class="calendar-day-header">${day}</div>`;
    });
    html += '</div><div class="calendar-days">';
    
    // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
    const firstDayOfWeek = firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1;
    for (let i = 0; i < firstDayOfWeek; i++) {
        html += '<div class="calendar-day empty"></div>';
    }
    
    // –î–Ω–∏ –º–µ—Å—è—Ü–∞
    for (let day = 1; day <= lastDay.getDate(); day++) {
        const date = new Date(currentYear, currentMonth, day);
        const hasGame = appData.games.some(game => {
            const gameDate = new Date(game.date);
            return gameDate.getDate() === day && 
                   gameDate.getMonth() === currentMonth && 
                   gameDate.getFullYear() === currentYear;
        });
        
        const isToday = day === now.getDate();
        const classes = ['calendar-day'];
        if (isToday) classes.push('today');
        if (hasGame) classes.push('has-game');
        
        html += `<div class="${classes.join(' ')}">${day}</div>`;
    }
    
    html += '</div>';
    calendarGrid.innerHTML = html;
}

// ============================================
// –¢–£–†–ù–ò–†–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê
// ============================================

async function showTournamentStandings(tournamentId) {
    try {
        const standings = await API.getTournamentStandings(tournamentId);
        const modal = document.getElementById('tournamentStandingsModal');
        const list = document.getElementById('standingsList');
        
        if (standings.length === 0) {
            list.innerHTML = '<p style="text-align: center; padding: 40px;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>';
        } else {
            list.innerHTML = standings.map((standing, index) => `
                <div class="standing-item ${index < 20 ? 'qualified' : ''}">
                    <div class="standing-position">${index + 1}</div>
                    <div class="standing-info">
                        <div class="standing-name">${standing.game_nickname}</div>
                        <div class="standing-stats">
                            ${standing.total_points} –æ—á–∫–æ–≤ ‚Ä¢ ${standing.games_played} –∏–≥—Ä
                        </div>
                    </div>
                    ${index < 20 ? '<div class="qualified-badge">‚úì –í —Ñ–∏–Ω–∞–ª–µ</div>' : ''}
                </div>
            `).join('');
        }
        
        modal.style.display = 'block';
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã');
    }
}

async function loadMyTournamentStanding() {
    if (!appData.selectedTournamentId || !appData.currentUser) return;
    
    try {
        const standings = await API.getTournamentStandings(appData.selectedTournamentId);
        const myStanding = standings.find(s => s.user_id === appData.currentUser.id);
        const myPosition = standings.findIndex(s => s.user_id === appData.currentUser.id) + 1;
        
        const container = document.getElementById('myTournamentStanding');
        if (!container) return;
        
        if (myStanding) {
            container.style.display = 'block';
            document.getElementById('myPosition').textContent = myPosition;
            document.getElementById('myPoints').textContent = myStanding.total_points;
            document.getElementById('myGames').textContent = myStanding.games_played;
            
            const statusBadge = document.getElementById('myStatus');
            if (myPosition <= 20) {
                statusBadge.innerHTML = '<span class="status-badge success">‚úÖ –í —Ñ–∏–Ω–∞–ª–µ</span>';
            } else {
                statusBadge.innerHTML = '<span class="status-badge">‚ùå –ù–µ –≤ —Ñ–∏–Ω–∞–ª–µ</span>';
            }
        } else {
            container.style.display = 'none';
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–∏:', error);
    }
}

// ============================================
// –ê–î–ú–ò–ù–ö–ê
// ============================================

async function showUsersList() {
    if (!appData.isAdmin) return;
    
    try {
        await loadAllUsers();
        
        const modal = document.getElementById('usersListModal');
        const list = document.getElementById('usersList');
        const title = modal.querySelector('.modal-header h2');
        
        title.textContent = `–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (${appData.registeredUsers.length})`;
        
        if (appData.registeredUsers.length === 0) {
            list.innerHTML = '<p style="text-align: center; padding: 40px;">–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>';
        } else {
            list.innerHTML = appData.registeredUsers.map(user => `
                <div class="user-item">
                    <div class="user-avatar-small">${user.avatar || 'üë§'}</div>
                    <div class="user-info-small">
                        <div class="user-name-small">${user.game_nickname}</div>
                        <div class="user-stats-small">Telegram ID: ${user.telegram_id}</div>
                    </div>
                </div>
            `).join('');
        }
        
        modal.style.display = 'block';
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
}

function showAddTournamentModal() {
    if (!appData.isAdmin) return;
    document.getElementById('addTournamentModal').style.display = 'block';
}

async function showGameDetails(gameId) {
    if (!appData.isAdmin) return;
    
    try {
        const game = appData.games.find(g => g.id === gameId);
        if (!game) return;
        
        const modal = document.getElementById('gameDetailsModal');
        const details = document.getElementById('gameDetails');
        const title = document.getElementById('gameDetailsTitle');
        
        title.textContent = `–ò–≥—Ä–∞ #${game.game_number}`;
        
        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const participants = game.participants || [];
        
        details.innerHTML = `
            <div class="game-info-block">
                <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ</h3>
                <p><strong>–î–∞—Ç–∞:</strong> ${formatDate(game.date)}</p>
                <p><strong>–í–∑–Ω–æ—Å:</strong> ${game.buyin_amount} ‚ÇΩ</p>
                <p><strong>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</strong> ${participants.length}/${game.max_players}</p>
            </div>
            <div class="participants-block">
                <h3>–£—á–∞—Å—Ç–Ω–∏–∫–∏ (${participants.length})</h3>
                <div class="participants-list">
                    ${participants.length === 0 ? '<p>–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</p>' : participants.map(p => `
                        <div class="participant-item">
                            <span>${p.game_nickname}</span>
                            <label>
                                <input type="checkbox" 
                                       ${p.is_paid ? 'checked' : ''} 
                                       onchange="togglePayment(${gameId}, ${p.user_id}, this.checked)">
                                –û–ø–ª–∞—á–µ–Ω–æ
                            </label>
                        </div>
                    `).join('')}
                </div>
            </div>
            ${game.status === 'upcoming' ? `
                <button class="btn-primary" onclick="startGame(${gameId})">
                    <i class="fas fa-play"></i>
                    <span>–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</span>
                </button>
            ` : ''}
        `;
        
        modal.style.display = 'block';
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π:', error);
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∏–≥—Ä—ã');
    }
}

async function showGameResults(gameId) {
    if (!appData.isAdmin) return;
    
    try {
        const game = appData.games.find(g => g.id === gameId);
        if (!game) return;
        
        const modal = document.getElementById('gameResultsModal');
        const form = document.getElementById('resultsForm');
        
        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–ª–∞—Ç–∏–ª–∏
        const participants = game.participants?.filter(p => p.is_paid) || [];
        
        if (participants.length === 0) {
            showAlert('–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –≤–∑–Ω–æ—Å');
            return;
        }
        
        form.innerHTML = `
            <h3>–ò–≥—Ä–∞ #${game.game_number}</h3>
            <p>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</p>
            <div class="results-list">
                ${participants.map((p, index) => `
                    <div class="result-item">
                        <span class="player-name">${p.game_nickname}</span>
                        <select id="place_${p.user_id}" class="place-select">
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ</option>
                            ${Array.from({length: participants.length}, (_, i) => `
                                <option value="${i + 1}">${i + 1} –º–µ—Å—Ç–æ</option>
                            `).join('')}
                        </select>
                        <span class="points" id="points_${p.user_id}">0 –æ—á–∫–æ–≤</span>
                    </div>
                `).join('')}
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤
        participants.forEach(p => {
            const select = document.getElementById(`place_${p.user_id}`);
            if (select) {
                select.addEventListener('change', function() {
                    updateResultPoints(p.user_id, this.value);
                });
            }
        });
        
        modal.style.display = 'block';
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º gameId –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        modal.dataset.gameId = gameId;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        showAlert('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    }
}

function updateResultPoints(userId, place) {
    const pointsSpan = document.getElementById(`points_${userId}`);
    if (!pointsSpan) return;
    
    const points = calculatePoints(parseInt(place));
    pointsSpan.textContent = `${points} –æ—á–∫–æ–≤`;
}

function calculatePoints(place) {
    const POINTS_SYSTEM = {
        1: 300,
        2: 240,
        3: 195,
        4: 150,
        5: 150,
        6: 90,
        7: 90,
        8: 90,
        9: 90,
        10: 90
    };
    
    return POINTS_SYSTEM[place] || 30; // 11+ –º–µ—Å—Ç–æ = 30 –æ—á–∫–æ–≤
}

async function saveGameResults() {
    try {
        const modal = document.getElementById('gameResultsModal');
        const gameId = parseInt(modal.dataset.gameId);
        
        if (!gameId) {
            showAlert('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∏–≥—Ä—ã');
            return;
        }
        
        const game = appData.games.find(g => g.id === gameId);
        const participants = game.participants?.filter(p => p.is_paid) || [];
        
        // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const results = [];
        const usedPlaces = new Set();
        
        for (const p of participants) {
            const placeSelect = document.getElementById(`place_${p.user_id}`);
            if (!placeSelect || !placeSelect.value) {
                showAlert(`–ù–µ —É–∫–∞–∑–∞–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è ${p.game_nickname}`);
                return;
            }
            
            const place = parseInt(placeSelect.value);
            
            if (usedPlaces.has(place)) {
                showAlert(`–ú–µ—Å—Ç–æ ${place} —É–∂–µ –∑–∞–Ω—è—Ç–æ!`);
                return;
            }
            
            usedPlaces.add(place);
            
            results.push({
                userId: p.user_id,
                place: place,
                points: calculatePoints(place)
            });
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        await API.saveGameResults(gameId, results);
        
        showAlert('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        closeModal('gameResultsModal');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã
        await loadGames(appData.selectedTournamentId);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
        showAlert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ' + error.message);
    }
}

async function togglePayment(gameId, userId, isPaid) {
    try {
        await API.markGamePayment(gameId, userId, isPaid);
        showAlert(isPaid ? '–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞' : '–û–ø–ª–∞—Ç–∞ —Å–Ω—è—Ç–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:', error);
        showAlert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã');
    }
}

async function startGame(gameId) {
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –Ω–∞ "in_progress"
        await API.updateGameStatus(gameId, 'in_progress');
        showAlert('–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!');
        closeModal('gameDetailsModal');
        await loadGames(appData.selectedTournamentId);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        showAlert('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
    }
}

// ============================================
// –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
// ============================================

async function registerUser() {
    const gameNickname = document.getElementById('gameNickname').value.trim();
    const preferredGame = document.getElementById('preferredGame').value;

    if (!gameNickname) {
        showAlert('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º!');
        return;
    }

    try {
        const user = tg.initDataUnsafe?.user || { id: Date.now(), first_name: 'Test User' };
        
        const userData = {
            telegramId: user.id,
            telegramName: user.first_name,
            telegramUsername: user.username || '',
            gameNickname: gameNickname,
            preferredGame: preferredGame
        };

        const newUser = await API.createUser(userData);
        appData.currentUser = newUser;
        appData.isAdmin = gameNickname === 'admin';

        closeModal('registrationModal');
        await loadInitialData();
        showAlert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        showAlert('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + error.message);
    }
}

function loginAsUser() {
    closeModal('loginModal');
    showRegistrationModal();
}

function loginAsAdmin() {
    appData.isAdmin = true;
    appData.currentUser = { 
        id: 1, 
        telegram_id: '609464085',
        gameNickname: 'Devans', 
        avatar: 'üëë',
        role: 'admin'
    };
    closeModal('loginModal');
    loadInitialData();
}

function showLoginModal() {
    document.getElementById('loginModal').style.display = 'block';
}

function showRegistrationModal() {
    closeModal('loginModal');
    document.getElementById('registrationModal').style.display = 'block';
}

// ============================================
// –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –¢–ê–ë–û–í
// ============================================

async function switchTab(tabName) {
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    document.querySelectorAll('.nav-item, .nav-tab').forEach(item => {
        item.classList.remove('active');
    });
    
    document.getElementById(tabName).classList.add('active');
    document.querySelectorAll(`[data-tab="${tabName}"]`).forEach(el => {
        el.classList.add('active');
    });
    
    vibrate();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    switch(tabName) {
        case 'home':
            await loadUserData();
            break;
        case 'games':
            await loadGames(appData.selectedTournamentId);
            break;
        case 'tournaments':
            await loadTournaments();
            break;
        case 'admin':
            await loadAdminData();
            break;
    }
}

// ============================================
// –£–¢–ò–õ–ò–¢–´
// ============================================

function showAlert(message) {
    console.log('üîî', message);
    if (tg && tg.showAlert) {
        try {
            tg.showAlert(message);
        } catch (e) {
            alert(message);
        }
    } else {
        alert(message);
    }
}

function vibrate() {
    if (tg && tg.HapticFeedback) {
        try {
            tg.HapticFeedback.impactOccurred('light');
        } catch (e) {
            // Ignore
        }
    }
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function getStatusText(status) {
    const statuses = {
        active: '–ê–∫—Ç–∏–≤–µ–Ω',
        upcoming: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π',
        finished: '–ó–∞–≤–µ—Ä—à—ë–Ω'
    };
    return statuses[status] || status;
}

function getGameStatusText(status) {
    const statuses = {
        upcoming: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è',
        in_progress: '–ò–¥—ë—Ç —Å–µ–π—á–∞—Å',
        finished: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        cancelled: '–û—Ç–º–µ–Ω–µ–Ω–∞'
    };
    return statuses[status] || status;
}

function updateNavigation() {
    const adminTab = document.querySelector('[data-tab="admin"]');
    if (adminTab) {
        adminTab.style.display = appData.isAdmin ? 'flex' : 'none';
    }
}

function applyTheme() {
    if (tg && tg.themeParams) {
        document.body.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#ffffff');
        document.body.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#000000');
        document.body.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color || '#3498db');
    }
}

// ============================================
// EVENT LISTENERS
// ============================================

document.addEventListener('DOMContentLoaded', function() {
    initApp();

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.querySelectorAll('.nav-item, .nav-tab').forEach(item => {
        item.addEventListener('click', function() {
            const tab = this.getAttribute('data-tab');
            switchTab(tab);
        });
    });
});

// ============================================
// –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô
// ============================================

window.switchTab = switchTab;
window.createTournament = createTournament;
window.selectTournament = selectTournament;
window.registerForGame = registerForGame;
window.cancelGameRegistration = cancelGameRegistration;
window.showTournamentStandings = showTournamentStandings;
window.showUsersList = showUsersList;
window.showAddTournamentModal = showAddTournamentModal;
window.showGameDetails = showGameDetails;
window.showGameResults = showGameResults;
window.saveGameResults = saveGameResults;
window.togglePayment = togglePayment;
window.startGame = startGame;
window.registerUser = registerUser;
window.loginAsUser = loginAsUser;
window.loginAsAdmin = loginAsAdmin;
window.closeModal = closeModal;

