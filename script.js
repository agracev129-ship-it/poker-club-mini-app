// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
let tg = window.Telegram.WebApp;

// –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let appData = {
    user: null,
    stats: {
        totalWins: 0,
        totalGames: 0,
        currentRank: 1,
        points: 0
    },
    tournaments: [],
    rating: [],
    achievements: []
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
    tg.expand();
    
    // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
    tg.enableClosingConfirmation();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    appData.user = tg.initDataUnsafe.user;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    initializeData();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loadUserData();
    loadTournaments();
    loadRating();
    loadAchievements();
    
    console.log("Poker Club Mini App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    console.log("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", appData.user);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
function initializeData() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    const savedStats = localStorage.getItem('pokerClub_stats');
    if (savedStats) {
        appData.stats = { ...appData.stats, ...JSON.parse(savedStats) };
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateStatsDisplay();
    updateUserProfile();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserData() {
    if (appData.user) {
        document.getElementById('userName').textContent = appData.user.first_name || '–ò–≥—Ä–æ–∫';
        document.getElementById('userRank').textContent = getRankName(appData.stats.currentRank);
        document.getElementById('profileName').textContent = appData.user.first_name || '–ò–≥—Ä–æ–∫';
        document.getElementById('profileRank').textContent = `–†–∞–Ω–≥: ${getRankName(appData.stats.currentRank)}`;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
function loadTournaments() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã
    appData.tournaments = [
        {
            id: 1,
            name: "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä",
            status: "active",
            time: "19:00 - 21:00",
            players: "12/20",
            prize: "100 –æ—á–∫–æ–≤",
            type: "daily"
        },
        {
            id: 2,
            name: "–¢—É—Ä–Ω–∏—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è",
            status: "upcoming",
            time: "20:00 - 23:00",
            players: "0/50",
            prize: "500 –æ—á–∫–æ–≤",
            type: "weekend"
        },
        {
            id: 3,
            name: "–ë—ã—Å—Ç—Ä—ã–π —Ç—É—Ä–Ω–∏—Ä",
            status: "finished",
            time: "18:00 - 19:00",
            players: "15/15",
            prize: "50 –æ—á–∫–æ–≤",
            type: "quick"
        }
    ];
    
    renderTournaments();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
function loadRating() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
    appData.rating = [
        { rank: 1, name: "–ê–ª–µ–∫—Å–µ–π –ü.", points: 2450, avatar: "üëë" },
        { rank: 2, name: "–ú–∞—Ä–∏—è –ö.", points: 2380, avatar: "ü•á" },
        { rank: 3, name: "–î–º–∏—Ç—Ä–∏–π –°.", points: 2200, avatar: "ü•à" },
        { rank: 4, name: "–ê–Ω–Ω–∞ –í.", points: 2150, avatar: "ü•â" },
        { rank: 5, name: "–°–µ—Ä–≥–µ–π –ú.", points: 2000, avatar: "‚≠ê" }
    ];
    
    renderRating();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function loadAchievements() {
    appData.achievements = [
        { id: 1, name: "–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞", desc: "–í—ã–∏–≥—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –∏–≥—Ä—É", icon: "üèÜ", unlocked: false },
        { id: 2, name: "–°—Ç—Ä–∞—Ç–µ–≥", desc: "–í—ã–∏–≥—Ä–∞—Ç—å 10 –∏–≥—Ä", icon: "üß†", unlocked: false },
        { id: 3, name: "–ß–µ–º–ø–∏–æ–Ω", desc: "–ó–∞–Ω—è—Ç—å 1 –º–µ—Å—Ç–æ –≤ —Ç—É—Ä–Ω–∏—Ä–µ", icon: "üëë", unlocked: false },
        { id: 4, name: "–ù–∞—Å—Ç–æ–π—á–∏–≤—ã–π", desc: "–°—ã–≥—Ä–∞—Ç—å 50 –∏–≥—Ä", icon: "üí™", unlocked: false }
    ];
    
    renderAchievements();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–∞–±–∞–º
    document.querySelectorAll('.nav-item').forEach(item => {
        item.addEventListener('click', function() {
            const tab = this.getAttribute('data-tab');
            switchTab(tab);
        });
    });
    
    // –§–∏–ª—å—Ç—Ä—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            filterTournaments(this.getAttribute('data-filter'));
        });
    });
    
    // –ü–µ—Ä–∏–æ–¥—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
    document.querySelectorAll('.period-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.period-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–º–µ–Ω—ã –ø–µ—Ä–∏–æ–¥–∞
        });
    });
    
    // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    document.getElementById('joinTournament')?.addEventListener('click', function() {
        switchTab('tournaments');
        vibrate();
    });
    
    document.getElementById('viewRating')?.addEventListener('click', function() {
        switchTab('rating');
        vibrate();
    });
    
    document.getElementById('viewAchievements')?.addEventListener('click', function() {
        switchTab('profile');
        vibrate();
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤
    document.getElementById('refreshTournaments')?.addEventListener('click', function() {
        this.style.transform = 'rotate(360deg)';
        setTimeout(() => {
            this.style.transform = 'rotate(0deg)';
        }, 500);
        loadTournaments();
        showAlert('–¢—É—Ä–Ω–∏—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
function switchTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–±—ã
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–±
    document.getElementById(tabName).classList.add('active');
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
    
    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
    vibrate();
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
function filterTournaments(filter) {
    const tournaments = appData.tournaments;
    let filtered = tournaments;
    
    if (filter !== 'all') {
        filtered = tournaments.filter(t => t.status === filter);
    }
    
    renderTournaments(filtered);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤
function renderTournaments(tournaments = appData.tournaments) {
    const container = document.getElementById('tournamentsList');
    if (!container) return;
    
    container.innerHTML = tournaments.map(tournament => `
        <div class="tournament-card">
            <div class="tournament-header">
                <h3>${tournament.name}</h3>
                <span class="tournament-status ${tournament.status}">
                    ${getStatusText(tournament.status)}
                </span>
            </div>
            <div class="tournament-info">
                <div class="info-item">
                    <i class="fas fa-clock"></i>
                    <span>${tournament.time}</span>
                </div>
                <div class="info-item">
                    <i class="fas fa-users"></i>
                    <span>${tournament.players} –∏–≥—Ä–æ–∫–æ–≤</span>
                </div>
                <div class="info-item">
                    <i class="fas fa-trophy"></i>
                    <span>–ü—Ä–∏–∑: ${tournament.prize}</span>
                </div>
            </div>
            <button class="btn-join" onclick="joinTournament(${tournament.id})">
                ${tournament.status === 'active' ? '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è' : 
                  tournament.status === 'upcoming' ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–ó–∞–≤–µ—Ä—à–µ–Ω'}
            </button>
        </div>
    `).join('');
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
function renderRating() {
    const container = document.getElementById('ratingList');
    if (!container) return;
    
    container.innerHTML = appData.rating.map(player => `
        <div class="rating-item">
            <div class="rank">${player.rank}</div>
            <div class="player-info">
                <div class="player-name">${player.name}</div>
                <div class="player-stats">${player.points} –æ—á–∫–æ–≤</div>
            </div>
            <div class="player-avatar">${player.avatar}</div>
        </div>
    `).join('');
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function renderAchievements() {
    const container = document.getElementById('achievementsList');
    if (!container) return;
    
    container.innerHTML = appData.achievements.map(achievement => `
        <div class="achievement-item ${achievement.unlocked ? 'unlocked' : 'locked'}">
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-info">
                <div class="achievement-name">${achievement.name}</div>
                <div class="achievement-desc">${achievement.desc}</div>
            </div>
        </div>
    `).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatsDisplay() {
    document.getElementById('totalWins').textContent = appData.stats.totalWins;
    document.getElementById('totalGames').textContent = appData.stats.totalGames;
    document.getElementById('currentRank').textContent = appData.stats.currentRank;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserProfile() {
    if (appData.user) {
        document.getElementById('userName').textContent = appData.user.first_name || '–ò–≥—Ä–æ–∫';
        document.getElementById('userRank').textContent = getRankName(appData.stats.currentRank);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–Ω–≥–∞
function getRankName(rank) {
    const ranks = {
        1: '–ù–æ–≤–∏—á–æ–∫',
        2: '–õ—é–±–∏—Ç–µ–ª—å',
        3: '–ò–≥—Ä–æ–∫',
        4: '–≠–∫—Å–ø–µ—Ä—Ç',
        5: '–ú–∞—Å—Ç–µ—Ä',
        6: '–ì—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä'
    };
    return ranks[rank] || '–ù–æ–≤–∏—á–æ–∫';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
    const statuses = {
        active: '–ê–∫—Ç–∏–≤–µ–Ω',
        upcoming: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π',
        finished: '–ó–∞–≤–µ—Ä—à–µ–Ω'
    };
    return statuses[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É
function joinTournament(tournamentId) {
    const tournament = appData.tournaments.find(t => t.id === tournamentId);
    if (!tournament) return;
    
    if (tournament.status === 'active') {
        showAlert(`–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É "${tournament.name}"!`);
        vibrate();
    } else if (tournament.status === 'upcoming') {
        showAlert(`–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç—É—Ä–Ω–∏—Ä "${tournament.name}"!`);
        vibrate();
    } else {
        showAlert('–≠—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showAlert(message) {
    tg.showAlert(message);
    console.log('Alert:', message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–±—Ä–∞—Ü–∏–∏
function vibrate() {
    if (tg.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('medium');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
function applyTheme() {
    const body = document.body;
    
    if (tg.colorScheme === 'dark') {
        body.classList.add('dark-theme');
    } else {
        body.classList.remove('dark-theme');
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData() {
    localStorage.setItem('pokerClub_stats', JSON.stringify(appData.stats));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initApp();
    applyTheme();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
tg.onEvent('themeChanged', applyTheme);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
tg.onEvent('viewportChanged', function() {
    console.log('–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è');
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
window.addEventListener('beforeunload', saveData);

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.joinTournament = joinTournament;
window.switchTab = switchTab;
window.filterTournaments = filterTournaments;

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.TelegramApp = {
    showAlert,
    vibrate,
    tg,
    appData
};
