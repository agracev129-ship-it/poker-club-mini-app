// ============================================
// POKER CLUB MINI APP - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ù–û–í–´–ú –î–ò–ó–ê–ô–ù–û–ú
// ============================================

const tg = window.Telegram?.WebApp || {};
const API_BASE = 'https://poker-club-server-1.onrender.com/api';

// –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const appData = {
    currentUser: null,
    isAdmin: false,
    registeredUsers: [],
    tournaments: [],
    games: [],
    selectedTournamentId: null,
    userGameHistory: [],
    tournamentStandings: []
};

// ============================================
// API –ú–ï–¢–û–î–´
// ============================================

const API = {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    async getUsers() {
        console.log('üîç API.getUsers()');
        const response = await fetch(`${API_BASE}/users`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        const data = await response.json();
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', data.length);
        return data;
    },

    async getUserByTelegramId(telegramId) {
        const response = await fetch(`${API_BASE}/users/telegram/${telegramId}`);
        if (!response.ok) return null;
        return await response.json();
    },

    async createUser(userData) {
        const response = await fetch(`${API_BASE}/users`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(userData)
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return await response.json();
    },

    async updateUser(userId, userData) {
        const response = await fetch(`${API_BASE}/users/${userId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(userData)
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return await response.json();
    },

    // –¢—É—Ä–Ω–∏—Ä—ã
    async getBigTournaments() {
        console.log('üîç API.getBigTournaments()');
        const response = await fetch(`${API_BASE}/big-tournaments`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        const data = await response.json();
        console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä—ã:', data.length);
        return data;
    },

    async createBigTournament(tournamentData) {
        console.log('üì§ API.createBigTournament:', tournamentData);
        const response = await fetch(`${API_BASE}/big-tournaments`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(tournamentData)
        });
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞');
        }
        const result = await response.json();
        console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω:', result);
        return result;
    },

    // –ò–≥—Ä—ã
    async getGames(tournamentId = null) {
        console.log('üîç API.getGames(), tournamentId:', tournamentId);
        const url = tournamentId 
            ? `${API_BASE}/games?tournamentId=${tournamentId}`
            : `${API_BASE}/games`;
        const response = await fetch(url);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä');
        const data = await response.json();
        console.log('‚úÖ –ò–≥—Ä—ã:', data.length);
        return data;
    },

    async createGame(gameData) {
        console.log('üì§ API.createGame:', gameData);
        const response = await fetch(`${API_BASE}/games`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(gameData)
        });
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã');
        }
        const result = await response.json();
        console.log('‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:', result);
        return result;
    },

    async updateGameStatus(gameId, status) {
        const response = await fetch(`${API_BASE}/games/${gameId}/status`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status })
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã');
        return await response.json();
    },

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—ã
    async registerForGame(gameId, userId) {
        console.log('üì§ API.registerForGame:', { gameId, userId });
        const response = await fetch(`${API_BASE}/game-registrations`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ gameId, userId })
        });
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        }
        return await response.json();
    },

    async cancelGameRegistration(gameId, userId) {
        console.log('üì§ API.cancelGameRegistration:', { gameId, userId });
        const response = await fetch(`${API_BASE}/game-registrations/${gameId}/${userId}`, {
            method: 'DELETE'
        });
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã');
        }
        return await response.json();
    },

    async getGameRegistrations(gameId) {
        const response = await fetch(`${API_BASE}/game-registrations/${gameId}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π');
        return await response.json();
    },

    async markGamePayment(gameId, userId, isPaid) {
        console.log('üì§ API.markGamePayment:', { gameId, userId, isPaid });
        const response = await fetch(`${API_BASE}/game-registrations/${gameId}/${userId}/payment`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ isPaid })
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã');
        return await response.json();
    },

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä
    async saveGameResults(gameId, results) {
        console.log('üì§ API.saveGameResults:', { gameId, results });
        const response = await fetch(`${API_BASE}/game-results/${gameId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ results })
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        return await response.json();
    },

    async getGameResults(gameId) {
        const response = await fetch(`${API_BASE}/game-results/${gameId}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        return await response.json();
    },

    // –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    async getTournamentStandings(tournamentId) {
        console.log('üîç API.getTournamentStandings:', tournamentId);
        const response = await fetch(`${API_BASE}/tournament-standings/${tournamentId}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã');
        const data = await response.json();
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', data.length);
        return data;
    },

    // –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserGameHistory(userId, tournamentId = null) {
        const url = tournamentId
            ? `${API_BASE}/user-game-history/${userId}?tournamentId=${tournamentId}`
            : `${API_BASE}/user-game-history/${userId}`;
        const response = await fetch(url);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
        return await response.json();
    },

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    async getStats() {
        const response = await fetch(`${API_BASE}/admin/stats`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        return await response.json();
    }
};

// ============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ============================================

async function initApp() {
    try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        if (tg && tg.ready) {
            try {
                tg.ready();
                tg.expand();
            } catch (e) {
                console.warn('Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        await checkAuthentication();

        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
}

async function checkAuthentication() {
    try {
        const user = tg.initDataUnsafe?.user;
        
        if (!user) {
            console.log('üë§ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–í–ê–°)
            appData.currentUser = {
                id: 1,
                telegram_id: '609464085',
                game_nickname: 'Devans',
                role: 'admin'
            };
            appData.isAdmin = true;
            await loadInitialData();
            return;
        }

        console.log('üë§ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
        let existingUser = await API.getUserByTelegramId(user.id);

        if (!existingUser) {
            // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existingUser = await API.createUser({
                telegram_id: user.id.toString(),
                telegram_username: user.username || '',
                game_nickname: user.first_name || '–ò–≥—Ä–æ–∫',
                avatar_url: user.photo_url || ''
            });
        }

        appData.currentUser = existingUser;
        appData.isAdmin = existingUser.role === 'admin' || existingUser.telegram_id === '609464085';
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', existingUser.game_nickname, 'Admin:', appData.isAdmin);
        
        await loadInitialData();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        showAlert('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + error.message);
    }
}

async function loadInitialData() {
    try {
        console.log('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        await loadUserData();
        await loadTournaments();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –∞–¥–º–∏–Ω
        if (appData.isAdmin) {
            const adminBtn = document.getElementById('adminBtn');
            if (adminBtn) adminBtn.style.display = 'flex';
        }
        
        updateNavigation();
        console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// ============================================
// –ù–ê–í–ò–ì–ê–¶–ò–Ø
// ============================================

function switchTab(tabName) {
    console.log('üìç –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);
    
    // –£–±–∏—Ä–∞–µ–º active —É –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });

    // –î–æ–±–∞–≤–ª—è–µ–º active –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π
    const tab = document.getElementById(tabName);
    const btn = document.querySelector(`.nav-btn[data-tab="${tabName}"]`);
    
    if (tab) tab.classList.add('active');
    if (btn) btn.classList.add('active');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
    loadTabData(tabName);
    
    // Haptic feedback
    vibrate();
}

async function loadTabData(tabName) {
    try {
        switch(tabName) {
            case 'home':
                await loadHomeData();
                break;
            case 'games':
                await loadGamesTab();
                break;
            case 'tournaments':
                await loadTournamentsTab();
                break;
            case 'rating':
                await loadRatingTab();
                break;
            case 'profile':
                await loadProfileTab();
                break;
            case 'admin':
                if (appData.isAdmin) {
                    await loadAdminPanel();
                }
                break;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        showAlert(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
}

function updateNavigation() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö –º–µ—Å—Ç–∞—Ö
    const userNameElements = document.querySelectorAll('#headerName, #userName');
    userNameElements.forEach(el => {
        if (el) el.textContent = appData.currentUser?.game_nickname || '–ò–≥—Ä–æ–∫';
    });
}

// ============================================
// –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê
// ============================================

async function loadHomeData() {
    console.log('üè† –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    
    updateTimer();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
    const headerName = document.getElementById('headerName');
    if (headerName && appData.currentUser) {
        headerName.textContent = appData.currentUser.game_nickname || '–ò–≥—Ä–æ–∫';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
    const headerAvatar = document.getElementById('headerAvatar');
    if (headerAvatar && appData.currentUser?.avatar_url) {
        headerAvatar.src = appData.currentUser.avatar_url;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    await loadTournamentsForHome();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await loadUserStats();
}

async function loadTournamentsForHome() {
    const container = document.getElementById('tournamentCardsContainer');
    if (!container || appData.tournaments.length === 0) return;

    // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 2 —Ç—É—Ä–Ω–∏—Ä–∞
    const activeTournaments = appData.tournaments.slice(0, 2);
    
    container.innerHTML = activeTournaments.map((tournament, index) => {
        const isPrimary = index === 0;
        const cardClass = isPrimary ? 'tournament-primary' : 'tournament-secondary';
        
        return `
            <button class="tournament-card ${cardClass}" onclick="selectTournament(${tournament.id})">
                <div class="tournament-players">
                    <div class="player-dot"></div>
                    <div class="player-dot"></div>
                    <div class="player-dot ${!isPrimary ? 'gray' : ''}"></div>
                </div>
                <div class="tournament-info">
                    <div class="tournament-type ${!isPrimary ? 'gray' : ''}">${tournament.name}</div>
                    <div class="tournament-time">19:00</div>
                </div>
                <button class="tournament-arrow">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="9 18 15 12 9 6"/>
                    </svg>
                </button>
            </button>
        `;
    }).join('');
}

async function loadUserStats() {
    if (!appData.currentUser) return;

    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        appData.userGameHistory = await API.getUserGameHistory(appData.currentUser.id);
        
        // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalGames = appData.userGameHistory.length;
        const wins = appData.userGameHistory.filter(g => g.place === 1).length;
        const totalPrizes = appData.userGameHistory.reduce((sum, g) => sum + (g.points || 0), 0);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        const gamesPlayedEl = document.getElementById('gamesPlayed');
        const userWinsEl = document.getElementById('userWins');
        const userPrizesEl = document.getElementById('userPrizes');
        
        if (gamesPlayedEl) gamesPlayedEl.textContent = totalGames;
        if (userWinsEl) userWinsEl.textContent = wins;
        if (userPrizesEl) userPrizesEl.textContent = `${totalPrizes * 100}‚ÇΩ`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        renderActivityGraph(appData.userGameHistory);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

function renderActivityGraph(games) {
    const container = document.getElementById('activityGraph');
    if (!container) return;

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–≥—Ä—ã –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 7 –¥–Ω—è–º
    const last7Days = Array(7).fill(0);
    const now = new Date();
    
    games.forEach(game => {
        const gameDate = new Date(game.game_date);
        const daysDiff = Math.floor((now - gameDate) / (1000 * 60 * 60 * 24));
        if (daysDiff >= 0 && daysDiff < 7) {
            last7Days[6 - daysDiff]++;
        }
    });
    
    const maxGames = Math.max(...last7Days, 1);
    
    container.innerHTML = last7Days.map(count => {
        const height = (count / maxGames) * 100;
        return `<div class="chart-bar" style="height: ${height}%"></div>`;
    }).join('');
}

function updateTimer() {
    const calculateTimeLeft = () => {
        const now = new Date();
        const nextGame = new Date();
        nextGame.setHours(19, 0, 0, 0);
        
        if (now.getHours() >= 19) {
            nextGame.setDate(nextGame.getDate() + 1);
        }
        
        const diff = nextGame.getTime() - now.getTime();
        const hours = Math.floor(diff / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        
        const timeLeftEl = document.getElementById('nextGameTimeLeft');
        if (timeLeftEl) {
            timeLeftEl.textContent = `–î–æ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã ${hours}—á ${minutes}–º`;
        }
    };

    calculateTimeLeft();
    setInterval(calculateTimeLeft, 60000);
}

// ============================================
// –ò–ì–†–´
// ============================================

async function loadGamesTab() {
    console.log('üéÆ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –∏–≥—Ä');
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–ª–∏ –≤—Å–µ –∏–≥—Ä—ã
        appData.games = await API.getGames(appData.selectedTournamentId);
        
        const container = document.getElementById('gamesList');
        if (!container) return;

        if (appData.games.length === 0) {
            container.innerHTML = `
                <div style="text-align: center; padding: 40px; color: #7f8c8d;">
                    <div style="font-size: 48px; margin-bottom: 16px;">üéÆ</div>
                    <p>–ò–≥—Ä –ø–æ–∫–∞ –Ω–µ—Ç</p>
                </div>
            `;
            return;
        }

        container.innerHTML = appData.games.map(game => {
            const gameDate = new Date(game.date);
            const participants = game.participants || [];
            const isRegistered = participants.some(p => p.user_id === appData.currentUser?.id);
            const canRegister = game.status === 'scheduled' && participants.length < game.max_players;
            
            return `
                <div class="game-card">
                    <div class="game-header">
                        <div>
                            <div class="game-title">–ò–≥—Ä–∞ #${game.game_number}</div>
                            <div class="game-meta">
                                <div class="game-meta-item">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/>
                                    </svg>
                                    <span>${participants.length} / ${game.max_players}</span>
                                </div>
                                <div class="game-meta-item">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <circle cx="12" cy="12" r="10"/><polyline points="12 6 12 12 16 14"/>
                                    </svg>
                                    <span>${gameDate.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'})}</span>
                                </div>
                                <div class="game-meta-item">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <rect width="18" height="18" x="3" y="4" rx="2"/><line x1="16" x2="16" y1="2" y2="6"/>
                                        <line x1="8" x2="8" y1="2" y2="6"/><line x1="3" x2="21" y1="10" y2="10"/>
                                    </svg>
                                    <span>${gameDate.toLocaleDateString('ru-RU', {day: '2-digit', month: '2-digit'})}</span>
                                </div>
                            </div>
                        </div>
                        <span class="game-status ${game.status}">${getGameStatusText(game.status)}</span>
                    </div>
                    ${isRegistered 
                        ? `<button class="game-join-btn" style="background: #4b5563;" onclick="cancelGameRegistration(${game.id})">
                            –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
                        </button>`
                        : canRegister 
                            ? `<button class="game-join-btn" onclick="registerForGame(${game.id})">
                                –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
                            </button>`
                            : `<button class="game-join-btn" style="background: #374151; cursor: not-allowed;" disabled>
                                –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞
                            </button>`
                    }
                </div>
            `;
        }).join('');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä:', error);
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä: ' + error.message);
    }
}

async function registerForGame(gameId) {
    if (!appData.currentUser) {
        showAlert('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        return;
    }

    try {
        await API.registerForGame(gameId, appData.currentUser.id);
        showAlert('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∏–≥—Ä—É!');
        vibrate();
        await loadGamesTab();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        showAlert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

async function cancelGameRegistration(gameId) {
    if (!appData.currentUser) return;

    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é? –ó–∞ –æ—Ç–º–µ–Ω—É –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 12 —á–∞—Å–æ–≤ –±—É–¥–µ—Ç —à—Ç—Ä–∞—Ñ.')) {
        return;
    }

    try {
        await API.cancelGameRegistration(gameId, appData.currentUser.id);
        showAlert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
        vibrate();
        await loadGamesTab();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã:', error);
        showAlert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

function getGameStatusText(status) {
    const statusMap = {
        'scheduled': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞',
        'registration_open': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
        'registration_closed': '–ó–∞–∫—Ä—ã—Ç–∞',
        'in_progress': '–ò–¥—ë—Ç',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
    };
    return statusMap[status] || status;
}

// ============================================
// –¢–£–†–ù–ò–†–´
// ============================================

async function loadTournaments() {
    try {
        console.log('üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤...');
        appData.tournaments = await API.getBigTournaments();
        console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', appData.tournaments.length);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', error);
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤: ' + error.message);
    }
}

async function loadTournamentsTab() {
    console.log('üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
    
    const container = document.getElementById('tournamentsList');
    if (!container) return;

    if (appData.tournaments.length === 0) {
        container.innerHTML = `
            <div style="padding: 2rem; text-align: center; color: var(--text-secondary);">
                <div style="font-size: 3rem; margin-bottom: 1rem;">üèÜ</div>
                <p>–¢—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
            </div>
        `;
        return;
    }

    // –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
    const activeTournament = appData.tournaments[0];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º standings –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    let standingsData = [];
    try {
        standingsData = await API.getTournamentStandings(activeTournament.id);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ standings:', error);
    }
    
    const totalPlayers = standingsData.length;
    
    container.innerHTML = `
        <div style="padding: 0 1rem 1.5rem;">
            <h3 style="font-size: 1rem; margin-bottom: 0.75rem; color: #d1d5db;">–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã</h3>
            <div class="tournament-active-card">
                <div style="position: relative; z-index: 10;">
                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 1rem;">
                        <div>
                            <h3 style="font-size: 1.5rem; margin-bottom: 0.5rem; font-style: italic;">
                                ${activeTournament.name}
                            </h3>
                            <div class="tournament-status-badge">
                                <div class="tournament-status-dot"></div>
                                <span>–ò–¥–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</span>
                            </div>
                        </div>
                    </div>
                    <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem; margin-bottom: 1rem;">
                        <div>
                            <div style="font-size: 0.75rem; color: var(--text-secondary); margin-bottom: 0.25rem;">–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥</div>
                            <div style="display: flex; align-items: center; gap: 0.25rem;">
                                <span>50,000‚ÇΩ</span>
                            </div>
                        </div>
                        <div>
                            <div style="font-size: 0.75rem; color: var(--text-secondary); margin-bottom: 0.25rem;">–£—á–∞—Å—Ç–Ω–∏–∫–∏</div>
                            <div>${totalPlayers} / 100</div>
                        </div>
                        <div>
                            <div style="font-size: 0.75rem; color: var(--text-secondary); margin-bottom: 0.25rem;">–ù–∞—á–∞–ª–æ</div>
                            <div>19:00</div>
                        </div>
                    </div>
                    <button class="btn-primary" onclick="selectTournament(${activeTournament.id})">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–≥—Ä—ã</button>
                </div>
            </div>
        </div>
        
        <div style="padding: 0 1rem;">
            <h3 style="font-size: 1rem; margin-bottom: 0.75rem; color: #d1d5db;">–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã</h3>
            ${appData.tournaments.slice(1).map(tournament => `
                <div class="list-card" style="border: 1px solid #374151; margin-bottom: 0.75rem;">
                    <h3 style="font-size: 1.125rem; margin-bottom: 0.75rem; font-style: italic;">
                        ${tournament.name}
                    </h3>
                    <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 0.75rem; font-size: 0.875rem; margin-bottom: 1rem;">
                        <div>
                            <div style="font-size: 0.75rem; color: #6b7280; margin-bottom: 0.25rem;">–ü—Ä–∏–∑–æ–≤–æ–π</div>
                            <div style="color: #fbbf24;">25,000‚ÇΩ</div>
                        </div>
                        <div>
                            <div style="font-size: 0.75rem; color: #6b7280; margin-bottom: 0.25rem;">–ò–≥—Ä–æ–∫–∏</div>
                            <div>45 / 80</div>
                        </div>
                        <div>
                            <div style="font-size: 0.75rem; color: #6b7280; margin-bottom: 0.25rem;">–î–∞—Ç–∞</div>
                            <div>${new Date(tournament.start_date).toLocaleDateString('ru-RU')}</div>
                        </div>
                    </div>
                    <button style="width: 100%; background: rgba(255,255,255,0.1); border: none; border-radius: 0.75rem; padding: 0.625rem; color: white; cursor: pointer;" onclick="selectTournament(${tournament.id})">
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </button>
                </div>
            `).join('')}
        </div>
    `;
}

function selectTournament(tournamentId) {
    console.log('‚úÖ –í—ã–±—Ä–∞–Ω —Ç—É—Ä–Ω–∏—Ä:', tournamentId);
    appData.selectedTournamentId = tournamentId;
    switchTab('games');
}

// ============================================
// –†–ï–ô–¢–ò–ù–ì
// ============================================

async function loadRatingTab() {
    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞');
    
    const container = document.getElementById('ratingContent');
    if (!container) return;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    const tournamentId = appData.selectedTournamentId || (appData.tournaments[0]?.id);
    
    if (!tournamentId) {
        container.innerHTML = `
            <div style="padding: 2rem; text-align: center; color: var(--text-secondary);">
                <p>–°–æ–∑–¥–∞–π—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞</p>
            </div>
        `;
        return;
    }

    try {
        const standings = await API.getTournamentStandings(tournamentId);
        appData.tournamentStandings = standings;
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userPosition = standings.findIndex(s => s.user_id === appData.currentUser?.id);
        const userStanding = userPosition >= 0 ? standings[userPosition] : null;
        
        const top3 = standings.slice(0, 3);
        
        container.innerHTML = `
            <!-- –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è -->
            ${userStanding ? `
                <div style="padding: 0 1rem 1rem;">
                    <div class="rating-position-card">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <div style="font-size: 0.75rem; color: var(--text-secondary); margin-bottom: 0.25rem;">–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è</div>
                                <div style="font-size: 1.5rem;">#${userPosition + 1}</div>
                            </div>
                            <div style="text-align: right;">
                                <div style="font-size: 0.75rem; color: var(--text-secondary); margin-bottom: 0.25rem;">–†–µ–π—Ç–∏–Ω–≥</div>
                                <div style="font-size: 1.25rem; color: #fbbf24;">${userStanding.total_points}</div>
                            </div>
                            <div style="width: 48px; height: 48px; background: rgba(185,28,28,0.2); border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M6 9H4.5a2.5 2.5 0 0 1 0-5H6"/><path d="M18 9h1.5a2.5 2.5 0 0 0 0-5H18"/>
                                    <path d="M4 22h16"/><path d="M18 2H6v7a6 6 0 0 0 12 0V2Z"/>
                                </svg>
                            </div>
                        </div>
                        ${userPosition < 20 ? `
                            <div style="font-size: 0.75rem; color: #22c55e; margin-top: 0.75rem;">
                                ‚úÖ –í—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –≤ –ì—Ä–∞–Ω–¥ –§–∏–Ω–∞–ª!
                            </div>
                        ` : `
                            <div style="font-size: 0.75rem; color: var(--text-secondary); margin-top: 0.75rem;">
                                –î–æ —Ç–æ–ø-20: <span style="color: white;">${standings[19]?.total_points - userStanding.total_points} –æ—á–∫–æ–≤</span>
                            </div>
                        `}
                    </div>
                </div>
            ` : ''}

            <!-- –¢–æ–ø-3 -->
            ${top3.length >= 3 ? `
                <div style="padding: 0 1rem 1rem;">
                    <div style="font-size: 0.875rem; color: var(--text-secondary); margin-bottom: 0.5rem;">–¢–æ–ø-3</div>
                    <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 0.5rem;">
                        <!-- 2 –º–µ—Å—Ç–æ -->
                        <div style="display: flex; flex-direction: column; align-items: center; padding-top: 1.5rem;">
                            <div style="width: 48px; height: 48px; border-radius: 50%; background: linear-gradient(135deg, #9ca3af, #6b7280); display: flex; align-items: center; justify-content: center; margin-bottom: 0.5rem; font-size: 0.875rem;">
                                2
                            </div>
                            <div class="list-card" style="width: 100%; text-align: center; padding: 0.625rem; border: 1px solid #374151;">
                                <div style="font-size: 0.75rem; margin-bottom: 0.25rem;">${top3[1].game_nickname}</div>
                                <div style="font-size: 0.75rem; color: #6b7280;">${top3[1].total_points}</div>
                            </div>
                        </div>

                        <!-- 1 –º–µ—Å—Ç–æ -->
                        <div style="display: flex; flex-direction: column; align-items: center;">
                            <div style="width: 64px; height: 64px; border-radius: 50%; background: linear-gradient(135deg, #fbbf24, #f59e0b); display: flex; align-items: center; justify-content: center; margin-bottom: 0.5rem;">
                                <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2">
                                    <path d="M6 9H4.5a2.5 2.5 0 0 1 0-5H6"/><path d="M18 9h1.5a2.5 2.5 0 0 0 0-5H18"/>
                                    <path d="M4 22h16"/><path d="M18 2H6v7a6 6 0 0 0 12 0V2Z"/>
                                </svg>
                            </div>
                            <div style="width: 100%; text-align: center; padding: 0.625rem; border-radius: 0.75rem; background: linear-gradient(135deg, var(--accent-red), var(--accent-red-dark));">
                                <div style="font-size: 0.75rem; margin-bottom: 0.25rem;">${top3[0].game_nickname}</div>
                                <div style="font-size: 0.75rem;">${top3[0].total_points}</div>
                            </div>
                        </div>

                        <!-- 3 –º–µ—Å—Ç–æ -->
                        <div style="display: flex; flex-direction: column; align-items: center; padding-top: 1.5rem;">
                            <div style="width: 48px; height: 48px; border-radius: 50%; background: linear-gradient(135deg, #fb923c, #ea580c); display: flex; align-items: center; justify-content: center; margin-bottom: 0.5rem; font-size: 0.875rem;">
                                3
                            </div>
                            <div class="list-card" style="width: 100%; text-align: center; padding: 0.625rem; border: 1px solid #374151;">
                                <div style="font-size: 0.75rem; margin-bottom: 0.25rem;">${top3[2].game_nickname}</div>
                                <div style="font-size: 0.75rem; color: #6b7280;">${top3[2].total_points}</div>
                            </div>
                        </div>
                    </div>
                </div>
            ` : ''}

            <!-- –ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ -->
            <div style="padding: 0 1rem;">
                <div style="font-size: 0.875rem; color: var(--text-secondary); margin-bottom: 0.5rem;">–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥</div>
                ${standings.map((player, index) => {
                    const bgClass = index === 0 ? 'linear-gradient(135deg, #fbbf24, #f59e0b)' :
                                    index === 1 ? 'linear-gradient(135deg, #9ca3af, #6b7280)' :
                                    index === 2 ? 'linear-gradient(135deg, #fb923c, #ea580c)' : '#374151';
                    const isCurrentUser = player.user_id === appData.currentUser?.id;
                    return `
                        <div class="list-card" style="display: flex; align-items: center; gap: 0.75rem; border: 1px solid ${isCurrentUser ? 'var(--accent-red)' : '#374151'}; ${isCurrentUser ? 'background: rgba(185,28,28,0.1);' : ''}">
                            <div style="width: 32px; height: 32px; border-radius: 50%; background: ${bgClass}; display: flex; align-items: center; justify-content: center; font-size: 0.875rem; flex-shrink: 0;">
                                ${index + 1}
                            </div>
                            <div style="flex: 1; min-width: 0;">
                                <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.125rem;">
                                    <span style="font-size: 0.875rem;">${player.game_nickname}</span>
                                    ${isCurrentUser ? '<span style="font-size: 0.75rem; color: var(--accent-red);">(–í—ã)</span>' : ''}
                                </div>
                                <div style="font-size: 0.75rem; color: #6b7280;">
                                    ${player.games_played} –∏–≥—Ä ‚Ä¢ ${player.total_points} –æ—á–∫–æ–≤
                                </div>
                            </div>
                            <div style="text-align: right; flex-shrink: 0;">
                                <div style="font-size: 0.875rem; color: #fbbf24;">${player.total_points}</div>
                                <div style="font-size: 0.75rem; color: #6b7280;">pts</div>
                            </div>
                        </div>
                    `;
                }).join('')}
            </div>
        `;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
        container.innerHTML = `
            <div style="padding: 2rem; text-align: center; color: var(--text-secondary);">
                <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞</p>
            </div>
        `;
    }
}

// ============================================
// –ü–†–û–§–ò–õ–¨
// ============================================

async function loadProfileTab() {
    console.log('üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è');
    
    const container = document.getElementById('profileContent');
    if (!container) return;

    const userName = appData.currentUser?.game_nickname || '–ò–≥—Ä–æ–∫';
    const userInitials = userName.substring(0, 2).toUpperCase();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userStats = {
        wins: 0,
        totalGames: 0,
        totalPoints: 0,
        position: '-'
    };

    try {
        if (appData.currentUser) {
            appData.userGameHistory = await API.getUserGameHistory(appData.currentUser.id);
            
            userStats.totalGames = appData.userGameHistory.length;
            userStats.wins = appData.userGameHistory.filter(g => g.place === 1).length;
            userStats.totalPoints = appData.userGameHistory.reduce((sum, g) => sum + (g.points || 0), 0);
            
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
            if (appData.tournamentStandings.length > 0) {
                const position = appData.tournamentStandings.findIndex(s => s.user_id === appData.currentUser.id);
                userStats.position = position >= 0 ? `#${position + 1}` : '-';
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }

    container.innerHTML = `
        <!-- –•–µ–¥–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è -->
        <div class="profile-header">
            <div class="profile-user-info">
                <div class="profile-avatar">${userInitials}</div>
                <div class="profile-details">
                    <div class="profile-name">${userName}</div>
                    <div class="profile-role">${appData.isAdmin ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ò–≥—Ä–æ–∫'} ‚Ä¢ ${userStats.position} –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ</div>
                </div>
                <button class="header-menu-btn" onclick="showProfileMenu()">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="1"/><circle cx="12" cy="5" r="1"/><circle cx="12" cy="19" r="1"/>
                    </svg>
                </button>
            </div>
        </div>

        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
        <div style="padding: 0 1rem 1rem;">
            <div class="summary-card">
                <div class="summary-label">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>
                <div class="summary-grid">
                    <div class="summary-item">
                        <div style="width: 40px; height: 40px; margin: 0 auto 0.5rem; border-radius: 50%; background: rgba(251,191,36,0.2); display: flex; align-items: center; justify-content: center;">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#fbbf24" stroke-width="2">
                                <path d="M6 9H4.5a2.5 2.5 0 0 1 0-5H6"/><path d="M18 9h1.5a2.5 2.5 0 0 0 0-5H18"/>
                                <path d="M4 22h16"/><path d="M18 2H6v7a6 6 0 0 0 12 0V2Z"/>
                            </svg>
                        </div>
                        <div class="summary-number">${userStats.wins}</div>
                        <div class="summary-text">–ü–æ–±–µ–¥</div>
                    </div>
                    <div class="summary-item">
                        <div style="width: 40px; height: 40px; margin: 0 auto 0.5rem; border-radius: 50%; background: rgba(239,68,68,0.2); display: flex; align-items: center; justify-content: center;">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#ef4444" stroke-width="2">
                                <circle cx="12" cy="12" r="10"/><circle cx="12" cy="12" r="6"/><circle cx="12" cy="12" r="2"/>
                            </svg>
                        </div>
                        <div class="summary-number">${userStats.totalGames}</div>
                        <div class="summary-text">–ò–≥—Ä</div>
                    </div>
                    <div class="summary-item">
                        <div style="width: 40px; height: 40px; margin: 0 auto 0.5rem; border-radius: 50%; background: rgba(168,85,247,0.2); display: flex; align-items: center; justify-content: center;">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#a855f7" stroke-width="2">
                                <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"/>
                            </svg>
                        </div>
                        <div class="summary-number">${userStats.totalPoints}</div>
                        <div class="summary-text">–û—á–∫–æ–≤</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è -->
        <div style="padding: 0 1rem 1rem;">
            <div style="font-size: 0.875rem; color: var(--text-secondary); margin-bottom: 0.5rem;">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</div>
            <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 0.75rem;">
                ${userStats.wins > 0 ? `
                    <div class="list-card" style="border: 1px solid rgba(251,191,36,0.3);">
                        <div style="width: 40px; height: 40px; margin-bottom: 0.75rem; border-radius: 50%; background: rgba(251,191,36,0.2); display: flex; align-items: center; justify-content: center;">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#fbbf24" stroke-width="2">
                                <path d="M6 9H4.5a2.5 2.5 0 0 1 0-5H6"/><path d="M18 9h1.5a2.5 2.5 0 0 0 0-5H18"/>
                                <path d="M4 22h16"/><path d="M18 2H6v7a6 6 0 0 0 12 0V2Z"/>
                            </svg>
                        </div>
                        <h3 style="font-size: 0.875rem; margin-bottom: 0.25rem;">–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞</h3>
                        <p style="font-size: 0.75rem; color: #6b7280;">–í—ã–∏–≥—Ä–∞–ª —Ç—É—Ä–Ω–∏—Ä</p>
                    </div>
                ` : ''}
                ${userStats.totalGames >= 10 ? `
                    <div class="list-card" style="border: 1px solid rgba(59,130,246,0.3);">
                        <div style="width: 40px; height: 40px; margin-bottom: 0.75rem; border-radius: 50%; background: rgba(59,130,246,0.2); display: flex; align-items: center; justify-content: center;">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#3b82f6" stroke-width="2">
                                <polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"/>
                            </svg>
                        </div>
                        <h3 style="font-size: 0.875rem; margin-bottom: 0.25rem;">–ê–∫—Ç–∏–≤–∏—Å—Ç</h3>
                        <p style="font-size: 0.75rem; color: #6b7280;">–°—ã–≥—Ä–∞–ª 10+ –∏–≥—Ä</p>
                    </div>
                ` : ''}
                ${userStats.position.includes('#') && parseInt(userStats.position.slice(1)) <= 3 ? `
                    <div class="list-card" style="border: 1px solid rgba(168,85,247,0.3);">
                        <div style="width: 40px; height: 40px; margin-bottom: 0.75rem; border-radius: 50%; background: rgba(168,85,247,0.2); display: flex; align-items: center; justify-content: center;">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#a855f7" stroke-width="2">
                                <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"/>
                            </svg>
                        </div>
                        <h3 style="font-size: 0.875rem; margin-bottom: 0.25rem;">–õ–µ–≥–µ–Ω–¥–∞</h3>
                        <p style="font-size: 0.75rem; color: #6b7280;">–ü–æ–ø–∞–ª –≤ —Ç–æ–ø-3</p>
                    </div>
                ` : ''}
                ${userStats.totalPoints >= 1000 ? `
                    <div class="list-card" style="border: 1px solid rgba(34,197,94,0.3);">
                        <div style="width: 40px; height: 40px; margin-bottom: 0.75rem; border-radius: 50%; background: rgba(34,197,94,0.2); display: flex; align-items: center; justify-content: center;">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#22c55e" stroke-width="2">
                                <polyline points="22 7 13.5 15.5 8.5 10.5 2 17"/><polyline points="16 7 22 7 22 13"/>
                            </svg>
                        </div>
                        <h3 style="font-size: 0.875rem; margin-bottom: 0.25rem;">–ú–∞—Å—Ç–µ—Ä</h3>
                        <p style="font-size: 0.75rem; color: #6b7280;">1000+ –æ—á–∫–æ–≤</p>
                    </div>
                ` : ''}
            </div>
        </div>

        <!-- –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä -->
        <div style="padding: 0 1rem 1rem;">
            <div style="font-size: 0.875rem; color: var(--text-secondary); margin-bottom: 0.5rem;">–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä</div>
            <div style="display: flex; flex-direction: column; gap: 0.5rem;">
                ${appData.userGameHistory.slice(0, 5).map(game => {
                    const gameDate = new Date(game.game_date);
                    const isWin = game.place === 1;
                    return `
                        <div class="list-card" style="display: flex; align-items: center; gap: 0.75rem; border: 1px solid #374151;">
                            <div style="width: 40px; height: 40px; border-radius: 50%; background: rgba(${isWin ? '34,197,94' : '239,68,68'},0.2); display: flex; align-items: center; justify-content: center; flex-shrink: 0;">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="${isWin ? '#22c55e' : '#ef4444'}" stroke-width="2">
                                    ${isWin 
                                        ? '<path d="M6 9H4.5a2.5 2.5 0 0 1 0-5H6"/><path d="M18 9h1.5a2.5 2.5 0 0 0 0-5H18"/><path d="M4 22h16"/><path d="M18 2H6v7a6 6 0 0 0 12 0V2Z"/>'
                                        : '<circle cx="12" cy="12" r="10"/><circle cx="12" cy="12" r="6"/><circle cx="12" cy="12" r="2"/>'
                                    }
                                </svg>
                            </div>
                            <div style="flex: 1; min-width: 0;">
                                <div style="font-size: 0.875rem; margin-bottom: 0.125rem;">${isWin ? '–ü–æ–±–µ–¥–∞' : `–ú–µ—Å—Ç–æ: ${game.place}`}</div>
                                <div style="font-size: 0.75rem; color: #6b7280;">–ò–≥—Ä–∞ #${game.game_number} ‚Ä¢ +${game.points} –æ—á–∫–æ–≤</div>
                            </div>
                            <div style="font-size: 0.75rem; color: #6b7280; flex-shrink: 0;">
                                ${Math.floor((new Date() - gameDate) / (1000 * 60 * 60 * 24))}–¥
                            </div>
                        </div>
                    `;
                }).join('') || '<div class="list-card" style="text-align: center; color: #6b7280;">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</div>'}
            </div>
        </div>
    `;
}

function showProfileMenu() {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
    showAlert('–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

// ============================================
// –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
// ============================================

async function loadAdminPanel() {
    console.log('üëë –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
    
    const container = document.getElementById('adminContent');
    if (!container) return;

    try {
        const stats = await API.getStats();
        
        container.innerHTML = `
            <div style="padding: 1rem;">
                <h2 style="font-size: 1.5rem; margin-bottom: 1rem;">–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>
                
                <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
                <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 0.75rem; margin-bottom: 1.5rem;">
                    <div class="list-card" style="text-align: center;">
                        <div style="font-size: 2rem; font-weight: 700; margin-bottom: 0.25rem;">${stats.totalUsers || 0}</div>
                        <div style="font-size: 0.75rem; color: var(--text-secondary);">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                    </div>
                    <div class="list-card" style="text-align: center;">
                        <div style="font-size: 2rem; font-weight: 700; margin-bottom: 0.25rem;">${stats.totalTournaments || 0}</div>
                        <div style="font-size: 0.75rem; color: var(--text-secondary);">–¢—É—Ä–Ω–∏—Ä–æ–≤</div>
                    </div>
                    <div class="list-card" style="text-align: center;">
                        <div style="font-size: 2rem; font-weight: 700; margin-bottom: 0.25rem;">${stats.activeGames || 0}</div>
                        <div style="font-size: 0.75rem; color: var(--text-secondary);">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä</div>
                    </div>
                </div>

                <!-- –î–µ–π—Å—Ç–≤–∏—è -->
                <div style="display: flex; flex-direction: column; gap: 0.75rem;">
                    <button class="btn-primary" onclick="showCreateTournamentModal()">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: 0.5rem;">
                            <line x1="12" y1="5" x2="12" y2="19"/><line x1="5" y1="12" x2="19" y2="12"/>
                        </svg>
                        –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
                    </button>
                    <button class="btn-primary" onclick="showCreateGameModal()">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: 0.5rem;">
                            <circle cx="12" cy="12" r="10"/><circle cx="12" cy="12" r="6"/><circle cx="12" cy="12" r="2"/>
                        </svg>
                        –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É
                    </button>
                    <button style="width: 100%; background: rgba(255,255,255,0.1); border: none; border-radius: 0.75rem; padding: 0.875rem; color: white; cursor: pointer; font-size: 1rem;" onclick="showUsersManagement()">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: 0.5rem; vertical-align: middle;">
                            <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/>
                        </svg>
                        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                    </button>
                </div>
            </div>
        `;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:', error);
        container.innerHTML = '<div class="list-card" style="margin: 1rem;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>';
    }
}

function showCreateTournamentModal() {
    const modal = document.getElementById('createTournamentModal');
    if (modal) {
        modal.classList.add('active');
    } else {
        // –°–æ–∑–¥–∞—ë–º –º–æ–¥–∞–ª –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        const modalHTML = `
            <div class="modal active" id="createTournamentModal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä</h3>
                        <button class="modal-close" onclick="closeCreateTournamentModal()">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/>
                            </svg>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div style="margin-bottom: 1rem;">
                            <label style="display: block; font-size: 0.875rem; margin-bottom: 0.5rem; color: var(--text-secondary);">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞</label>
                            <input type="text" id="adminTournamentName" style="width: 100%; padding: 0.75rem; border-radius: 0.75rem; border: 1px solid #374151; background: var(--bg-tertiary); color: white; font-size: 1rem;" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ">
                        </div>
                        <div style="margin-bottom: 1rem;">
                            <label style="display: block; font-size: 0.875rem; margin-bottom: 0.5rem; color: var(--text-secondary);">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                            <textarea id="adminTournamentDescription" style="width: 100%; padding: 0.75rem; border-radius: 0.75rem; border: 1px solid #374151; background: var(--bg-tertiary); color: white; font-size: 1rem; min-height: 100px;" placeholder="–û–ø–∏—à–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä"></textarea>
                        </div>
                        <button class="btn-primary" onclick="createTournamentFromAdmin()">–°–æ–∑–¥–∞—Ç—å</button>
                    </div>
                </div>
            </div>
        `;
        document.body.insertAdjacentHTML('beforeend', modalHTML);
    }
    vibrate();
}

function closeCreateTournamentModal() {
    const modal = document.getElementById('createTournamentModal');
    if (modal) modal.remove();
}

async function createTournamentFromAdmin() {
    const name = document.getElementById('adminTournamentName').value.trim();
    const description = document.getElementById('adminTournamentDescription').value.trim();
    
    if (!name) {
        showAlert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞');
        return;
    }
    
    try {
        await API.createBigTournament({
            name,
            description,
            startDate: new Date().toISOString(),
            topPlayersCount: 20
        });
        
        showAlert('–¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
        closeCreateTournamentModal();
        await loadTournaments();
        await loadAdminPanel();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', error);
        showAlert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

function showCreateGameModal() {
    showAlert('–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã - –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–∞ desktop');
}

async function showUsersManagement() {
    try {
        const users = await API.getUsers();
        
        const modalHTML = `
            <div class="modal active" id="usersModal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (${users.length})</h3>
                        <button class="modal-close" onclick="document.getElementById('usersModal').remove()">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/>
                            </svg>
                        </button>
                    </div>
                    <div class="modal-body" style="max-height: 60vh; overflow-y: auto;">
                        ${users.map(user => `
                            <div class="list-card" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                                <div>
                                    <div style="font-size: 0.875rem;">${user.game_nickname}</div>
                                    <div style="font-size: 0.75rem; color: #6b7280;">@${user.telegram_username || 'no_username'}</div>
                                </div>
                                <div style="font-size: 0.75rem; padding: 0.25rem 0.75rem; border-radius: 999px; background: ${user.role === 'admin' ? 'rgba(251,191,36,0.2)' : 'rgba(255,255,255,0.1)'}; color: ${user.role === 'admin' ? '#fbbf24' : 'white'};">
                                    ${user.role === 'admin' ? '–ê–¥–º–∏–Ω' : '–ò–≥—Ä–æ–∫'}
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
        `;
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        vibrate();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
}

// ============================================
// –£–¢–ò–õ–ò–¢–´
// ============================================

function showAlert(message) {
    console.log('üîî Alert:', message);
    if (tg.showAlert) {
        try {
            tg.showAlert(message);
        } catch (error) {
            console.warn('Telegram showAlert failed:', error);
            alert(message);
        }
    } else {
        alert(message);
    }
}

function vibrate() {
    if (tg.HapticFeedback) {
        try {
            tg.HapticFeedback.impactOccurred('light');
        } catch (error) {
            console.warn('Telegram vibrate failed:', error);
        }
    }
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
}

// ============================================
// –ó–ê–ü–£–°–ö
// ============================================

document.addEventListener('DOMContentLoaded', initApp);

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
document.addEventListener('click', (e) => {
    if (e.target.classList.contains('modal')) {
        e.target.remove();
    }
});

console.log('‚úÖ Script loaded successfully');
