// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let appData = {
    registeredUsers: [],
    tournaments: [],
    currentUser: null,
    isAdmin: false
};

// ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const ADMIN_TELEGRAM_ID = "609464085";

// Telegram Cloud Storage –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
const TelegramStorage = {
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Telegram Cloud Storage
    async save(key, data) {
        try {
            const dataStr = JSON.stringify(data);
            if (window.Telegram?.WebApp?.CloudStorage) {
                await new Promise((resolve, reject) => {
                    window.Telegram.WebApp.CloudStorage.setItem(key, dataStr, (error, success) => {
                        if (error) reject(error);
                        else resolve(success);
                    });
                });
                console.log(`Saved to Telegram Cloud: ${key}`);
            }
        } catch (error) {
            console.error('Error saving to Telegram Cloud:', error);
        }
    },

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram Cloud Storage
    async load(key, defaultValue = null) {
        try {
            if (window.Telegram?.WebApp?.CloudStorage) {
                return await new Promise((resolve) => {
                    window.Telegram.WebApp.CloudStorage.getItem(key, (error, value) => {
                        if (error || !value) {
                            resolve(defaultValue);
                        } else {
                            try {
                                resolve(JSON.parse(value));
                            } catch (e) {
                                resolve(defaultValue);
                            }
                        }
                    });
                });
            }
            return defaultValue;
        } catch (error) {
            console.error('Error loading from Telegram Cloud:', error);
            return defaultValue;
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏
    async getKeys() {
        try {
            if (window.Telegram?.WebApp?.CloudStorage) {
                return await new Promise((resolve) => {
                    window.Telegram.WebApp.CloudStorage.getKeys((error, keys) => {
                        if (error) resolve([]);
                        else resolve(keys || []);
                    });
                });
            }
            return [];
        } catch (error) {
            console.error('Error getting keys:', error);
            return [];
        }
    }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
const SharedData = {
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async loadUsers() {
        const keys = await TelegramStorage.getKeys();
        const userKeys = keys.filter(k => k.startsWith('user_'));
        const users = [];
        
        for (const key of userKeys) {
            const user = await TelegramStorage.load(key);
            if (user) users.push(user);
        }
        
        return users;
    },

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async saveUser(user) {
        await TelegramStorage.save(`user_${user.telegramId}`, user);
        console.log('User saved:', user.gameNickname);
    },

    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    async getUserByTelegramId(telegramId) {
        return await TelegramStorage.load(`user_${telegramId}`);
    },

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã
    async loadTournaments() {
        const keys = await TelegramStorage.getKeys();
        const tournamentKeys = keys.filter(k => k.startsWith('tournament_'));
        const tournaments = [];
        
        for (const key of tournamentKeys) {
            const tournament = await TelegramStorage.load(key);
            if (tournament) tournaments.push(tournament);
        }
        
        return tournaments.sort((a, b) => new Date(a.date) - new Date(b.date));
    },

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä
    async saveTournament(tournament) {
        await TelegramStorage.save(`tournament_${tournament.id}`, tournament);
        console.log('Tournament saved:', tournament.name);
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä –ø–æ ID
    async getTournamentById(tournamentId) {
        return await TelegramStorage.load(`tournament_${tournamentId}`);
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        if (window.Telegram && window.Telegram.WebApp) {
            window.Telegram.WebApp.ready();
            window.Telegram.WebApp.expand();
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await initializeData();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        await checkAuthentication();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        loadUserData();
        loadTournaments();
        loadRating();
        
        console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
async function initializeData() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        appData.registeredUsers = await SharedData.loadUsers();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã
        appData.tournaments = await SharedData.loadTournaments();
        
        console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
            users: appData.registeredUsers.length,
            tournaments: appData.tournaments.length
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        appData.registeredUsers = [];
        appData.tournaments = [];
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function checkAuthentication() {
    try {
        const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user;
        
        if (!telegramUser) {
            showLoginModal();
            return;
        }

        const telegramId = telegramUser.id.toString();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const user = await SharedData.getUserByTelegramId(telegramId);
        
        if (user) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
            appData.currentUser = user;
            appData.isAdmin = telegramId === ADMIN_TELEGRAM_ID;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
            let updated = false;
            const telegramName = `${telegramUser.first_name || ''} ${telegramUser.last_name || ''}`.trim();
            if (telegramName && telegramName !== user.telegramName) {
                user.telegramName = telegramName;
                updated = true;
            }
            
            if (telegramUser.username && telegramUser.username !== user.telegramUsername) {
                user.telegramUsername = telegramUser.username;
                updated = true;
            }
            
            if (updated) {
                await SharedData.saveUser(user);
                appData.currentUser = user;
            }
        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            showRegistrationModal();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        showLoginModal();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
function showLoginModal() {
    const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user;
    const telegramId = telegramUser?.id?.toString();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    const adminLoginBtn = document.getElementById('adminLoginBtn');
    if (adminLoginBtn) {
        adminLoginBtn.style.display = telegramId === ADMIN_TELEGRAM_ID ? 'block' : 'none';
    }
    
    showModal('loginModal');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
function showRegistrationModal() {
    showModal('registrationModal');
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser() {
    try {
        const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user;
        
        if (!telegramUser) {
            showError('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
            return;
        }

        const gameNickname = document.getElementById('gameNickname').value.trim();
        const preferredGame = document.getElementById('preferredGame').value;
        
        if (!gameNickname) {
            showError('–í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º–∞
        const existingUser = appData.registeredUsers.find(u => u.gameNickname === gameNickname);
        if (existingUser) {
            showError('–≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç');
            return;
        }

        const newUser = {
            id: Date.now(),
            telegramId: telegramUser.id,
            telegramName: `${telegramUser.first_name || ''} ${telegramUser.last_name || ''}`.trim(),
            telegramUsername: telegramUser.username || null,
            gameNickname: gameNickname,
            preferredGame: preferredGame,
            avatar: 'üë§',
            telegramAvatarUrl: telegramUser.photo_url || null,
            stats: {
                totalWins: 0,
                totalGames: 0,
                points: 0,
                currentRank: 1
            },
            registrationDate: new Date().toISOString()
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await SharedData.saveUser(newUser);
        
        appData.currentUser = newUser;
        appData.isAdmin = telegramUser.id.toString() === ADMIN_TELEGRAM_ID;
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await initializeData();
        
        closeModal('registrationModal');
        loadUserData();
        loadTournaments();
        loadRating();
        
        showSuccess('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        showError(error.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
}

// –í—Ö–æ–¥ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async function loginAsUser() {
    try {
        const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user;
        
        if (!telegramUser) {
            showError('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
            return;
        }

        const telegramId = telegramUser.id.toString();
        const user = await SharedData.getUserByTelegramId(telegramId);
        
        if (user) {
            appData.currentUser = user;
            appData.isAdmin = telegramId === ADMIN_TELEGRAM_ID;
            
            closeModal('loginModal');
            loadUserData();
            loadTournaments();
            loadRating();
        } else {
            showRegistrationModal();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        showError('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    }
}

// –í—Ö–æ–¥ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
async function loginAsAdmin() {
    try {
        const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user;
        
        if (!telegramUser) {
            showError('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
            return;
        }

        const telegramId = telegramUser.id.toString();
        
        if (telegramId !== ADMIN_TELEGRAM_ID) {
            showError('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const user = await SharedData.getUserByTelegramId(telegramId);
        
        if (user) {
            appData.currentUser = user;
            appData.isAdmin = true;
            
            closeModal('loginModal');
            loadUserData();
            loadTournaments();
            loadRating();
        } else {
            showRegistrationModal();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∞:', error);
        showError('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserData() {
    if (!appData.currentUser) return;

    const userAvatar = document.getElementById('userAvatar');
    const userName = document.getElementById('userName');
    const profileAvatar = document.getElementById('profileAvatar');
    const profileNickname = document.getElementById('profileNickname');
    const profileStats = document.getElementById('profileStats');

    if (userAvatar) {
        userAvatar.textContent = appData.currentUser.avatar || 'üë§';
    }

    if (userName) {
        userName.textContent = appData.currentUser.gameNickname || '–ì–æ—Å—Ç—å';
    }

    if (profileAvatar) {
        profileAvatar.textContent = appData.currentUser.avatar || 'üë§';
    }

    if (profileNickname) {
        profileNickname.textContent = appData.currentUser.gameNickname || '–ì–æ—Å—Ç—å';
    }

    if (profileStats) {
        const stats = appData.currentUser.stats || {};
        const winRate = stats.totalGames > 0 ? Math.round((stats.totalWins / stats.totalGames) * 100) : 0;
        profileStats.textContent = `–ü–æ–±–µ–¥: ${stats.totalWins || 0} | –ò–≥—Ä: ${stats.totalGames || 0} | –í–∏–Ω—Ä–µ–π—Ç: ${winRate}% | –û—á–∫–∏: ${stats.points || 0}`;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    const adminPanel = document.getElementById('adminPanel');
    const addTournamentBtn = document.getElementById('addTournamentBtn');
    
    if (adminPanel) {
        adminPanel.style.display = appData.isAdmin ? 'block' : 'none';
    }
    
    if (addTournamentBtn) {
        addTournamentBtn.style.display = appData.isAdmin ? 'block' : 'none';
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞
    if (appData.isAdmin) {
        loadRegisteredUsers();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
async function loadTournaments() {
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤
        updateTournamentStatuses();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Ç—É—Ä–Ω–∏—Ä—ã
        renderTournaments();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤
function updateTournamentStatuses() {
    const now = new Date();
    
    appData.tournaments.forEach(tournament => {
        const tournamentDate = new Date(tournament.date);
        
        if (tournament.status === 'upcoming' && tournamentDate <= now) {
            tournament.status = 'active';
        }
    });
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç—É—Ä–Ω–∏—Ä–æ–≤
function renderTournaments() {
    const tournamentsList = document.getElementById('tournamentsList');
    if (!tournamentsList) return;

    if (appData.tournaments.length === 0) {
        tournamentsList.innerHTML = '<p style="text-align: center; color: var(--tg-theme-hint-color); padding: 20px;">–¢—É—Ä–Ω–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
    }

    tournamentsList.innerHTML = appData.tournaments.map(tournament => {
        const tournamentDate = new Date(tournament.date);
        const isParticipant = tournament.participants?.some(p => p.telegramId === appData.currentUser?.telegramId);
        const isFull = tournament.participants?.length >= tournament.maxPlayers;
        
        return `
            <div class="tournament-card">
                <div class="tournament-header">
                    <div class="tournament-info">
                        <h3>${tournament.name}</h3>
                        <div class="tournament-date">${tournamentDate.toLocaleString('ru-RU')}</div>
                    </div>
                    <div class="tournament-status ${tournament.status}">${getStatusText(tournament.status)}</div>
                </div>
                
                <div class="tournament-details">
                    <div class="tournament-detail">
                        <div class="tournament-detail-label">–£—á–∞—Å—Ç–Ω–∏–∫–∏</div>
                        <div class="tournament-detail-value">${tournament.participants?.length || 0}/${tournament.maxPlayers}</div>
                    </div>
                    <div class="tournament-detail">
                        <div class="tournament-detail-label">–ü—Ä–∏–∑</div>
                        <div class="tournament-detail-value">${tournament.prize} –æ—á–∫–æ–≤</div>
                    </div>
                    <div class="tournament-detail">
                        <div class="tournament-detail-label">–¢–∏–ø</div>
                        <div class="tournament-detail-value">${getGameTypeText(tournament.type)}</div>
                    </div>
                </div>
                
                <div class="tournament-actions">
                    <button class="btn-participants" onclick="showTournamentParticipants(${tournament.id})" title="–£—á–∞—Å—Ç–Ω–∏–∫–∏">
                        üë•
                    </button>
                    ${getTournamentButton(tournament, isParticipant, isFull)}
                    ${appData.isAdmin && tournament.status === 'active' ? 
                        `<button class="tournament-btn" onclick="finishTournament(${tournament.id})">–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä</button>` : ''}
                </div>
            </div>
        `;
    }).join('');
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
    const statusTexts = {
        'upcoming': '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π',
        'active': '–ê–∫—Ç–∏–≤–Ω—ã–π',
        'finished': '–ó–∞–≤–µ—Ä—à–µ–Ω'
    };
    return statusTexts[status] || status;
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ –∏–≥—Ä—ã
function getGameTypeText(type) {
    const typeTexts = {
        'texas_holdem': 'Texas Hold\'em',
        'omaha': 'Omaha',
        'seven_card_stud': 'Seven Card Stud',
        'five_card_draw': 'Five Card Draw'
    };
    return typeTexts[type] || type;
}

// –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫—É —Ç—É—Ä–Ω–∏—Ä–∞
function getTournamentButton(tournament, isParticipant, isFull) {
    if (tournament.status === 'finished') {
        return '<button class="tournament-btn" disabled>–ó–∞–≤–µ—Ä—à–µ–Ω</button>';
    }
    
    if (isParticipant) {
        return '<button class="tournament-btn" disabled>–£—á–∞—Å—Ç–≤—É–µ—Ç–µ</button>';
    }
    
    if (isFull) {
        return '<button class="tournament-btn" disabled>–ó–∞–ø–æ–ª–Ω–µ–Ω</button>';
    }
    
    if (tournament.status === 'upcoming') {
        return `<button class="tournament-btn primary" onclick="joinTournament(${tournament.id})">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</button>`;
    }
    
    return '<button class="tournament-btn" disabled>–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ</button>';
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É
async function joinTournament(tournamentId) {
    try {
        if (!appData.currentUser) {
            showError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
            return;
        }

        const tournament = await SharedData.getTournamentById(tournamentId);
        if (!tournament) {
            showError('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (!tournament.participants) {
            tournament.participants = [];
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
        const alreadyJoined = tournament.participants.some(p => p.telegramId === appData.currentUser.telegramId);
        if (alreadyJoined) {
            showError('–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ —Ç—É—Ä–Ω–∏—Ä
        if (tournament.participants.length >= tournament.maxPlayers) {
            showError('–¢—É—Ä–Ω–∏—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω');
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        tournament.participants.push({
            id: appData.currentUser.id,
            telegramId: appData.currentUser.telegramId,
            nickname: appData.currentUser.gameNickname,
            avatar: appData.currentUser.avatar,
            joinDate: new Date().toISOString()
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—É—Ä–Ω–∏—Ä
        await SharedData.saveTournament(tournament);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã
        await initializeData();
        
        renderTournaments();
        showSuccess('–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É!');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ç—É—Ä–Ω–∏—Ä—É:', error);
        showError(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ç—É—Ä–Ω–∏—Ä—É');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
function showTournamentParticipants(tournamentId) {
    const tournament = appData.tournaments.find(t => t.id === tournamentId);
    if (!tournament) return;

    const participantsList = document.getElementById('participantsList');
    if (!participantsList) return;

    if (!tournament.participants || tournament.participants.length === 0) {
        participantsList.innerHTML = '<p style="text-align: center; color: var(--tg-theme-hint-color); padding: 20px;">–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
    } else {
        participantsList.innerHTML = tournament.participants.map(participant => `
            <div class="participant-item" onclick="showUserProfile('${participant.nickname}')">
                <div class="participant-avatar">
                    ${participant.avatar || 'üë§'}
                </div>
                <div class="participant-info">
                    <div class="participant-nickname">${participant.nickname}</div>
                    <div class="participant-join-date">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${new Date(participant.joinDate).toLocaleString('ru-RU')}</div>
                </div>
            </div>
        `).join('');
    }

    showModal('participantsModal');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function showUserProfile(nickname) {
    const user = appData.registeredUsers.find(u => u.gameNickname === nickname);
    if (!user) return;

    const userProfileContent = document.getElementById('userProfileContent');
    if (!userProfileContent) return;

    const stats = user.stats || {};
    const winRate = stats.totalGames > 0 ? Math.round((stats.totalWins / stats.totalGames) * 100) : 0;
    const rank = getRankName(stats.points || 0);

    userProfileContent.innerHTML = `
        <div class="user-profile-avatar">
            ${user.avatar || 'üë§'}
        </div>
        <div class="user-profile-info">
            <h4>${user.gameNickname}</h4>
            <p>${user.telegramName || '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
            ${user.telegramUsername ? `<p>@${user.telegramUsername}</p>` : ''}
            ${appData.isAdmin ? `<p><strong>Telegram ID:</strong> ${user.telegramId}</p>` : ''}
        </div>
        <div class="user-profile-stats">
            <div class="user-profile-stat">
                <span class="user-profile-stat-value">${stats.totalWins || 0}</span>
                <span class="user-profile-stat-label">–ü–æ–±–µ–¥</span>
            </div>
            <div class="user-profile-stat">
                <span class="user-profile-stat-value">${stats.totalGames || 0}</span>
                <span class="user-profile-stat-label">–ò–≥—Ä</span>
            </div>
            <div class="user-profile-stat">
                <span class="user-profile-stat-value">${winRate}%</span>
                <span class="user-profile-stat-label">–í–∏–Ω—Ä–µ–π—Ç</span>
            </div>
            <div class="user-profile-stat">
                <span class="user-profile-stat-value">${stats.points || 0}</span>
                <span class="user-profile-stat-label">–û—á–∫–∏</span>
            </div>
        </div>
        <div style="text-align: center; margin-top: 16px;">
            <strong>–†–∞–Ω–≥:</strong> ${rank}
        </div>
    `;

    showModal('userProfileModal');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)
async function showAllUsers() {
    try {
        const allUsersList = document.getElementById('allUsersList');
        if (!allUsersList) return;

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º
        const sortedUsers = [...appData.registeredUsers].sort((a, b) => (b.stats?.points || 0) - (a.stats?.points || 0));

        if (sortedUsers.length === 0) {
            allUsersList.innerHTML = '<p style="text-align: center; color: var(--tg-theme-hint-color); padding: 20px;">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        } else {
            allUsersList.innerHTML = sortedUsers.map((user, index) => {
                const stats = user.stats || {};
                const winRate = stats.totalGames > 0 ? Math.round((stats.totalWins / stats.totalGames) * 100) : 0;
                const rank = getRankName(stats.points || 0);

                return `
                    <div class="user-item" onclick="showUserProfile('${user.gameNickname}')">
                        <div class="user-rank-badge">#${index + 1}</div>
                        <div class="user-avatar-small">
                            ${user.avatar || 'üë§'}
                        </div>
                        <div class="user-info">
                            <div class="user-nickname">${user.gameNickname}</div>
                            <div class="user-stats">${stats.totalWins || 0} –ø–æ–±–µ–¥, ${stats.totalGames || 0} –∏–≥—Ä (${winRate}%), ${rank}</div>
                            ${appData.isAdmin ? `<div style="font-size: 10px; color: var(--tg-theme-hint-color);">ID: ${user.telegramId}</div>` : ''}
                        </div>
                        <div class="user-points">${stats.points || 0}</div>
                    </div>
                `;
            }).join('');
        }

        showModal('allUsersModal');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
async function createTournament() {
    try {
        const name = document.getElementById('tournamentName').value.trim();
        const date = document.getElementById('tournamentDate').value;
        const duration = parseInt(document.getElementById('tournamentDuration').value);
        const maxPlayers = parseInt(document.getElementById('tournamentMaxPlayers').value);
        const prize = parseInt(document.getElementById('tournamentPrize').value);
        const type = document.getElementById('tournamentType').value;

        if (!name || !date) {
            showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }

        const newTournament = {
            id: Date.now(),
            name,
            date,
            duration,
            maxPlayers,
            prize,
            type,
            status: 'upcoming',
            participants: []
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—É—Ä–Ω–∏—Ä
        await SharedData.saveTournament(newTournament);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã
        await initializeData();
        
        closeModal('addTournamentModal');
        renderTournaments();
        showSuccess('–¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω!');
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('addTournamentForm').reset();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', error);
        showError(error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞');
    }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
async function finishTournament(tournamentId) {
    try {
        if (!appData.isAdmin) {
            showError('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const tournament = await SharedData.getTournamentById(tournamentId);
        if (!tournament) {
            showError('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        tournament.status = 'finished';
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—É—Ä–Ω–∏—Ä
        await SharedData.saveTournament(tournament);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã
        await initializeData();
        
        renderTournaments();
        showSuccess('–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
function loadRating() {
    const ratingList = document.getElementById('ratingList');
    if (!ratingList) return;

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º
    const sortedUsers = [...appData.registeredUsers].sort((a, b) => (b.stats?.points || 0) - (a.stats?.points || 0));

    if (sortedUsers.length === 0) {
        ratingList.innerHTML = '<p style="text-align: center; color: var(--tg-theme-hint-color); padding: 20px;">–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç</p>';
        return;
    }

    ratingList.innerHTML = sortedUsers.map((user, index) => {
        const stats = user.stats || {};
        const winRate = stats.totalGames > 0 ? Math.round((stats.totalWins / stats.totalGames) * 100) : 0;

        return `
            <div class="rating-item" onclick="showUserProfile('${user.gameNickname}')">
                <div class="rating-position">${index + 1}</div>
                <div class="rating-avatar">
                    ${user.avatar || 'üë§'}
                </div>
                <div class="rating-info">
                    <div class="rating-nickname">${user.gameNickname}</div>
                    <div class="rating-stats">${stats.totalWins || 0} –ø–æ–±–µ–¥, ${stats.totalGames || 0} –∏–≥—Ä (${winRate}%)</div>
                </div>
                <div class="rating-points">${stats.points || 0}</div>
            </div>
        `;
    }).join('');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
function switchRatingPeriod(period) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
    loadRating();
}

// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–Ω–≥–∞
function getRankName(points) {
    if (points >= 10000) return '–õ–µ–≥–µ–Ω–¥–∞';
    if (points >= 5000) return '–ú–∞—Å—Ç–µ—Ä';
    if (points >= 2000) return '–≠–∫—Å–ø–µ—Ä—Ç';
    if (points >= 1000) return '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª';
    if (points >= 500) return '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
    if (points >= 100) return '–û–ø—ã—Ç–Ω—ã–π';
    if (points >= 50) return '–ù–∞—á–∏–Ω–∞—é—â–∏–π';
    return '–ù–æ–≤–∏—á–æ–∫';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
function loadRegisteredUsers() {
    document.getElementById('totalUsers').textContent = appData.registeredUsers.length || 0;
    document.getElementById('totalTournaments').textContent = appData.tournaments.length || 0;
    const activeGames = appData.tournaments.filter(t => t.status === 'active').length;
    document.getElementById('activeGames').textContent = activeGames;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function showModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.add('active');
        modal.style.display = 'flex';
    }
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.remove('active');
        modal.style.display = 'none';
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
function showAddTournamentModal() {
    if (!appData.isAdmin) {
        showError('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
    }
    showModal('addTournamentModal');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
function showAvatarModal() {
    showModal('avatarModal');
}

// –í—ã–±—Ä–∞—Ç—å —ç–º–æ–¥–∑–∏ –∞–≤–∞—Ç–∞—Ä–∫—É
function selectEmojiAvatar(emoji) {
    document.querySelectorAll('.avatar-option').forEach(option => {
        option.classList.remove('selected');
    });
    event.target.classList.add('selected');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É
    window.selectedAvatar = emoji;
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É
function uploadAvatar() {
    showError('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É
async function saveAvatar() {
    try {
        if (!window.selectedAvatar) {
            showError('–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä–∫—É');
            return;
        }

        if (!appData.currentUser) {
            showError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
            return;
        }

        appData.currentUser.avatar = window.selectedAvatar;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await SharedData.saveUser(appData.currentUser);
        
        closeModal('avatarModal');
        loadUserData();
        showSuccess('–ê–≤–∞—Ç–∞—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
        showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
function showEditProfileModal() {
    if (!appData.currentUser) return;
    
    document.getElementById('editGameNickname').value = appData.currentUser.gameNickname || '';
    document.getElementById('editPreferredGame').value = appData.currentUser.preferredGame || 'texas_holdem';
    
    showModal('editProfileModal');
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
async function editProfile() {
    try {
        const gameNickname = document.getElementById('editGameNickname').value.trim();
        const preferredGame = document.getElementById('editPreferredGame').value;

        if (!gameNickname) {
            showError('–í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º');
            return;
        }

        if (!appData.currentUser) {
            showError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
            return;
        }

        appData.currentUser.gameNickname = gameNickname;
        appData.currentUser.preferredGame = preferredGame;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await SharedData.saveUser(appData.currentUser);
        
        closeModal('editProfileModal');
        loadUserData();
        showSuccess('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        showError(error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function showTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const selectedTab = document.getElementById(tabName + 'Tab');
    if (selectedTab) {
        selectedTab.classList.add('active');
    }
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const selectedBtn = document.querySelector(`[onclick="showTab('${tabName}')"]`);
    if (selectedBtn) {
        selectedBtn.classList.add('active');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
    if (tabName === 'tournaments') {
        loadTournaments();
    } else if (tabName === 'rating') {
        loadRating();
    } else if (tabName === 'profile') {
        loadUserData();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
function showError(message) {
    if (window.Telegram?.WebApp?.showAlert) {
        window.Telegram.WebApp.showAlert(message);
    } else {
        alert(message);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—Ö
function showSuccess(message) {
    if (window.Telegram?.WebApp?.showAlert) {
        window.Telegram.WebApp.showAlert(message);
    } else {
        alert(message);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º
document.addEventListener('DOMContentLoaded', function() {
    // –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const registrationForm = document.getElementById('registrationForm');
    if (registrationForm) {
        registrationForm.addEventListener('submit', function(e) {
            e.preventDefault();
            registerUser();
        });
    }

    // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
    const addTournamentForm = document.getElementById('addTournamentForm');
    if (addTournamentForm) {
        addTournamentForm.addEventListener('submit', function(e) {
            e.preventDefault();
            createTournament();
        });
    }

    // –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    const editProfileForm = document.getElementById('editProfileForm');
    if (editProfileForm) {
        editProfileForm.addEventListener('submit', function(e) {
            e.preventDefault();
            editProfile();
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
            closeModal(e.target.id);
        }
    });
});

// –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function forceDataSync() {
    initializeData().then(() => {
        showSuccess('–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
        loadTournaments();
        loadRating();
        loadUserData();
    });
}

function createDemoData() {
    showError('–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
}

function showUsersList() {
    showAllUsers();
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.showTab = showTab;
window.showModal = showModal;
window.closeModal = closeModal;
window.showAddTournamentModal = showAddTournamentModal;
window.showTournamentParticipants = showTournamentParticipants;
window.joinTournament = joinTournament;
window.finishTournament = finishTournament;
window.showUserProfile = showUserProfile;
window.showAllUsers = showAllUsers;
window.showAvatarModal = showAvatarModal;
window.selectEmojiAvatar = selectEmojiAvatar;
window.uploadAvatar = uploadAvatar;
window.saveAvatar = saveAvatar;
window.showEditProfileModal = showEditProfileModal;
window.switchRatingPeriod = switchRatingPeriod;
window.loginAsUser = loginAsUser;
window.loginAsAdmin = loginAsAdmin;
window.registerUser = registerUser;
window.createTournament = createTournament;
window.editProfile = editProfile;
window.forceDataSync = forceDataSync;
window.createDemoData = createDemoData;
window.showUsersList = showUsersList;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
initApp();
