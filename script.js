// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
let tg = window.Telegram.WebApp;

// –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let appData = {
    user: null,
    currentUser: null,
    isAdmin: false,
    isLoggedIn: false,
    stats: {
        totalWins: 0,
        totalGames: 0,
        currentRank: 1,
        points: 0
    },
    tournaments: [],
    rating: [],
    achievements: [],
    registeredUsers: [],
    tournamentParticipants: {},
    selectedAvatar: null
};

// ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID)
const ADMIN_TELEGRAM_ID = 609464085; // –¢–≤–æ–π Telegram ID

// –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const Storage = {
    save: (key, data) => {
        localStorage.setItem(`pokerClub_${key}`, JSON.stringify(data));
    },
    load: (key, defaultValue = null) => {
        const data = localStorage.getItem(`pokerClub_${key}`);
        return data ? JSON.parse(data) : defaultValue;
    },
    remove: (key) => {
        localStorage.removeItem(`pokerClub_${key}`);
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    tg.expand();
    tg.enableClosingConfirmation();
    appData.user = tg.initDataUnsafe.user;
    initializeData();
    setupEventListeners();
    checkAuthentication();
    console.log("Poker Club Mini App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuthentication() {
    const currentUser = Storage.load('currentUser');
    
    if (currentUser) {
        appData.currentUser = currentUser;
        appData.isLoggedIn = true;
        appData.isAdmin = currentUser.telegramId === ADMIN_TELEGRAM_ID;
        loadAllData();
        updateUserInterface();
    } else {
        showLoginModal();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
function showLoginModal() {
    const modal = document.getElementById('loginModal');
    const adminBtn = document.getElementById('adminLoginBtn');
    
    if (appData.user && appData.user.id === ADMIN_TELEGRAM_ID) {
        adminBtn.style.display = 'block';
    } else {
        adminBtn.style.display = 'none';
    }
    
    modal.style.display = 'block';
}

// –í—Ö–æ–¥ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
function loginAsUser() {
    closeModal('loginModal');
    const existingUser = findUserByTelegramId(appData.user.id);
    
    if (existingUser) {
        appData.currentUser = existingUser;
        appData.isLoggedIn = true;
        appData.isAdmin = false;
        Storage.save('currentUser', appData.currentUser);
        updateUserInterface();
        loadAllData();
    } else {
        showRegistrationModal();
    }
}

// –í—Ö–æ–¥ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
function loginAsAdmin() {
    closeModal('loginModal');
    
    appData.currentUser = {
        telegramId: appData.user.id,
        telegramName: appData.user.first_name,
        gameNickname: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        preferredGame: 'mixed',
        isAdmin: true,
        stats: { totalWins: 0, totalGames: 0, currentRank: 6, points: 9999 }
    };
    
    appData.isLoggedIn = true;
    appData.isAdmin = true;
    Storage.save('currentUser', appData.currentUser);
    updateUserInterface();
    loadAllData();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
function showRegistrationModal() {
    closeModal('loginModal');
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∏ –∞–≤–∞—Ç–∞—Ä–∫–µ
    requestTelegramData();
    
    document.getElementById('registrationModal').style.display = 'block';
}

// –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram
function requestTelegramData() {
    if (tg.initDataUnsafe.user) {
        const user = tg.initDataUnsafe.user;
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –∏–∑ Telegram
        if (user.photo_url) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å URL –∞–≤–∞—Ç–∞—Ä–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            appData.telegramAvatar = user.photo_url;
            console.log('Telegram avatar URL:', user.photo_url);
        }
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if (tg.requestContact) {
            tg.requestContact();
        }
        
        console.log('Telegram user data:', user);
    }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function registerUser() {
    const nickname = document.getElementById('gameNickname').value.trim();
    const preferredGame = document.getElementById('preferredGame').value;
    
    if (!nickname) {
        showAlert('–í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º!');
        return;
    }
    
    if (isNicknameTaken(nickname)) {
        showAlert('–≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç!');
        return;
    }
    
    const newUser = {
        telegramId: appData.user.id,
        telegramName: appData.user.first_name,
        telegramUsername: appData.user.username,
        gameNickname: nickname,
        preferredGame: preferredGame,
        isAdmin: false,
        stats: { totalWins: 0, totalGames: 0, currentRank: 1, points: 0 },
        registrationDate: new Date().toISOString(),
        avatar: appData.telegramAvatar ? 'telegram' : 'üë§', // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏–∑ Telegram
        telegramAvatarUrl: appData.telegramAvatar || null
    };
    
    appData.registeredUsers.push(newUser);
    Storage.save('registeredUsers', appData.registeredUsers);
    
    appData.currentUser = newUser;
    appData.isLoggedIn = true;
    appData.isAdmin = false;
    Storage.save('currentUser', appData.currentUser);
    
    closeModal('registrationModal');
    updateUserInterface();
    loadAllData();
    showAlert(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Poker Club, ${nickname}! üéâ`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    setTimeout(() => {
        loadRating();
    }, 500);
}

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
function findUserByTelegramId(telegramId) {
    return appData.registeredUsers.find(user => user.telegramId === telegramId);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –Ω–∏–∫–Ω–µ–π–º–∞
function isNicknameTaken(nickname) {
    return appData.registeredUsers.some(user => 
        user.gameNickname.toLowerCase() === nickname.toLowerCase()
    );
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
function loadAllData() {
    loadUserData();
    loadTournaments();
    loadRating();
    loadAchievements();
    loadRegisteredUsers();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
function initializeData() {
    appData.registeredUsers = Storage.load('registeredUsers', []);
    appData.tournaments = Storage.load('tournaments', []);
    appData.tournamentParticipants = Storage.load('tournamentParticipants', {});
    
    if (appData.tournaments.length === 0) {
        createDefaultTournaments();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
function createDefaultTournaments() {
    appData.tournaments = [
        {
            id: 1,
            name: "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä",
            status: "active",
            date: new Date().toISOString(),
            duration: 2,
            maxPlayers: 20,
            prize: 100,
            type: "texas",
            participants: []
        },
        {
            id: 2,
            name: "–¢—É—Ä–Ω–∏—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è",
            status: "upcoming",
            date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
            duration: 3,
            maxPlayers: 50,
            prize: 500,
            type: "mixed",
            participants: []
        }
    ];
    Storage.save('tournaments', appData.tournaments);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserData() {
    if (appData.currentUser) {
        document.getElementById('userName').textContent = appData.currentUser.gameNickname;
        document.getElementById('userRank').textContent = getRankName(appData.currentUser.stats.currentRank);
        document.getElementById('profileName').textContent = appData.currentUser.gameNickname;
        document.getElementById('profileRank').textContent = `–†–∞–Ω–≥: ${getRankName(appData.currentUser.stats.currentRank)}`;
        document.getElementById('userNickname').textContent = appData.currentUser.gameNickname;
        document.getElementById('profileNickname').style.display = 'block';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
        let avatar = appData.currentUser.avatar || 'üë§';
        
        // –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫–∞ –∏–∑ Telegram, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
        if (avatar === 'telegram' && appData.currentUser.telegramAvatarUrl) {
            avatar = 'üì∑'; // –°–∏–º–≤–æ–ª –∫–∞–º–µ—Ä—ã –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏–∑ Telegram
        }
        
        document.getElementById('profileAvatar').textContent = avatar;
        document.getElementById('userAvatar').textContent = avatar;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        document.getElementById('totalWins').textContent = appData.currentUser.stats.totalWins;
        document.getElementById('totalGames').textContent = appData.currentUser.stats.totalGames;
        document.getElementById('currentRank').textContent = appData.currentUser.stats.currentRank;
        document.getElementById('profileGames').textContent = appData.currentUser.stats.totalGames;
        document.getElementById('profileWins').textContent = appData.currentUser.stats.totalWins;
        document.getElementById('profilePoints').textContent = appData.currentUser.stats.points;
        
        const winRate = appData.currentUser.stats.totalGames > 0 
            ? Math.round((appData.currentUser.stats.totalWins / appData.currentUser.stats.totalGames) * 100)
            : 0;
        document.getElementById('profileWinRate').textContent = `${winRate}%`;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
function loadTournaments() {
    updateTournamentStatuses();
    renderTournaments();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤
function updateTournamentStatuses() {
    const now = new Date();
    
    appData.tournaments.forEach(tournament => {
        const tournamentDate = new Date(tournament.date);
        const endDate = new Date(tournamentDate.getTime() + tournament.duration * 60 * 60 * 1000);
        
        if (tournament.status === 'upcoming' && now >= tournamentDate) {
            tournament.status = 'active';
        } else if (tournament.status === 'active' && now >= endDate) {
            // –¢—É—Ä–Ω–∏—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –µ–≥–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å
        }
    });
    
    Storage.save('tournaments', appData.tournaments);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
function loadRating() {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º
    const sortedUsers = [...appData.registeredUsers].sort((a, b) => b.stats.points - a.stats.points);
    appData.rating = sortedUsers.slice(0, 10).map((user, index) => ({
        rank: index + 1,
        name: user.gameNickname,
        points: user.stats.points,
        avatar: index === 0 ? "üëë" : index === 1 ? "ü•á" : index === 2 ? "ü•à" : "‚≠ê"
    }));
    renderRating();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function loadAchievements() {
    appData.achievements = [
        { id: 1, name: "–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞", desc: "–í—ã–∏–≥—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –∏–≥—Ä—É", icon: "üèÜ", unlocked: appData.currentUser?.stats.totalWins > 0 },
        { id: 2, name: "–°—Ç—Ä–∞—Ç–µ–≥", desc: "–í—ã–∏–≥—Ä–∞—Ç—å 10 –∏–≥—Ä", icon: "üß†", unlocked: appData.currentUser?.stats.totalWins >= 10 },
        { id: 3, name: "–ß–µ–º–ø–∏–æ–Ω", desc: "–ó–∞–Ω—è—Ç—å 1 –º–µ—Å—Ç–æ –≤ —Ç—É—Ä–Ω–∏—Ä–µ", icon: "üëë", unlocked: false },
        { id: 4, name: "–ù–∞—Å—Ç–æ–π—á–∏–≤—ã–π", desc: "–°—ã–≥—Ä–∞—Ç—å 50 –∏–≥—Ä", icon: "üí™", unlocked: appData.currentUser?.stats.totalGames >= 50 }
    ];
    renderAchievements();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function loadRegisteredUsers() {
    if (appData.isAdmin) {
        const totalUsers = appData.registeredUsers.length;
        const totalTournaments = appData.tournaments.length;
        const activeGames = appData.tournaments.filter(t => t.status === 'active').length;
        
        document.getElementById('totalUsers').textContent = totalUsers;
        document.getElementById('totalTournaments').textContent = totalTournaments;
        document.getElementById('activeGames').textContent = activeGames;
        
        console.log('Admin stats updated:', { totalUsers, totalTournaments, activeGames });
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUserInterface() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏
    const addTournamentBtn = document.getElementById('addTournamentBtn');
    if (addTournamentBtn) {
        addTournamentBtn.style.display = appData.isAdmin ? 'block' : 'none';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    updateNavigation();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function updateNavigation() {
    const bottomNav = document.querySelector('.bottom-nav');
    
    if (appData.isAdmin) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-—Ç–∞–±
        const adminTab = document.createElement('button');
        adminTab.className = 'nav-item';
        adminTab.setAttribute('data-tab', 'admin');
        adminTab.innerHTML = '<i class="fas fa-crown"></i><span>–ê–¥–º–∏–Ω</span>';
        adminTab.addEventListener('click', function() {
            switchTab('admin');
        });
        bottomNav.appendChild(adminTab);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤
function renderTournaments(tournaments = appData.tournaments) {
    const container = document.getElementById('tournamentsList');
    if (!container) return;
    
    container.innerHTML = tournaments.map(tournament => {
        const participantsCount = tournament.participants ? tournament.participants.length : 0;
        const isParticipant = tournament.participants && tournament.participants.some(p => p.telegramId === appData.currentUser?.telegramId);
        
        return `
            <div class="tournament-card">
                <div class="tournament-header">
                    <h3>${tournament.name}</h3>
                    <span class="tournament-status ${tournament.status}">
                        ${getStatusText(tournament.status)}
                    </span>
                </div>
                <div class="tournament-info">
                    <div class="info-item">
                        <i class="fas fa-clock"></i>
                        <span>${formatDate(tournament.date)}</span>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-users"></i>
                        <span>${participantsCount}/${tournament.maxPlayers} –∏–≥—Ä–æ–∫–æ–≤</span>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-trophy"></i>
                        <span>–ü—Ä–∏–∑: ${tournament.prize} –æ—á–∫–æ–≤</span>
                    </div>
                </div>
                <div class="tournament-actions">
                    <button class="btn-join" onclick="joinTournament(${tournament.id})" ${isParticipant ? 'disabled' : ''}>
                        ${isParticipant ? '–£—á–∞—Å—Ç–≤—É—é' : getJoinButtonText(tournament.status)}
                    </button>
                    <button class="btn-participants" onclick="showTournamentParticipants(${tournament.id})">
                        <i class="fas fa-users"></i>
                    </button>
                </div>
                ${appData.isAdmin && tournament.status === 'active' ? `
                <div class="tournament-management">
                    <button class="btn-finish" onclick="finishTournament(${tournament.id})">
                        <i class="fas fa-stop"></i>
                        –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä
                    </button>
                </div>
                ` : ''}
            </div>
        `;
    }).join('');
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
function renderRating() {
    const container = document.getElementById('ratingList');
    if (!container) return;
    
    container.innerHTML = appData.rating.map(player => `
        <div class="rating-item" onclick="showUserProfile('${player.name}')">
            <div class="rank">${player.rank}</div>
            <div class="player-info">
                <div class="player-name">${player.name}</div>
                <div class="player-stats">${player.points} –æ—á–∫–æ–≤</div>
            </div>
            <div class="player-avatar">${player.avatar}</div>
        </div>
    `).join('');
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function renderAchievements() {
    const container = document.getElementById('achievementsList');
    if (!container) return;
    
    container.innerHTML = appData.achievements.map(achievement => `
        <div class="achievement-item ${achievement.unlocked ? 'unlocked' : 'locked'}">
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-info">
                <div class="achievement-name">${achievement.name}</div>
                <div class="achievement-desc">${achievement.desc}</div>
            </div>
        </div>
    `).join('');
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É
function joinTournament(tournamentId) {
    const tournament = appData.tournaments.find(t => t.id === tournamentId);
    if (!tournament) return;
    
    if (tournament.status !== 'active' && tournament.status !== 'upcoming') {
        showAlert('–≠—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
        return;
    }
    
    if (!tournament.participants) {
        tournament.participants = [];
    }
    
    const isAlreadyParticipant = tournament.participants.some(p => p.telegramId === appData.currentUser.telegramId);
    if (isAlreadyParticipant) {
        showAlert('–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ!');
        return;
    }
    
    if (tournament.participants.length >= tournament.maxPlayers) {
        showAlert('–¢—É—Ä–Ω–∏—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω!');
        return;
    }
    
    tournament.participants.push({
        telegramId: appData.currentUser.telegramId,
        nickname: appData.currentUser.gameNickname,
        joinDate: new Date().toISOString(),
        avatar: appData.currentUser.avatar,
        telegramAvatarUrl: appData.currentUser.telegramAvatarUrl
    });
    
    Storage.save('tournaments', appData.tournaments);
    renderTournaments();
    showAlert(`–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É "${tournament.name}"!`);
    vibrate();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
function showTournamentParticipants(tournamentId) {
    const tournament = appData.tournaments.find(t => t.id === tournamentId);
    if (!tournament) return;
    
    const participants = tournament.participants || [];
    const container = document.getElementById('participantsList');
    
    container.innerHTML = participants.map((participant, index) => {
        let avatar = participant.avatar || participant.nickname.charAt(0).toUpperCase();
        
        // –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫–∞ –∏–∑ Telegram, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
        if (avatar === 'telegram' && participant.telegramAvatarUrl) {
            avatar = 'üì∑';
        }
        
        return `
            <div class="participant-item" onclick="showUserProfile('${participant.nickname}')">
                <div class="user-avatar-small">${avatar}</div>
                <div class="user-info-small">
                    <div class="user-name-small">${participant.nickname}</div>
                    <div class="user-stats-small">–£—á–∞—Å—Ç–Ω–∏–∫ —Å ${formatDate(participant.joinDate)}</div>
                </div>
            </div>
        `;
    }).join('');
    
    document.getElementById('participantsModal').style.display = 'block';
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function showUserProfile(nickname) {
    const user = appData.registeredUsers.find(u => u.gameNickname === nickname);
    if (!user) return;
    
    const container = document.getElementById('userProfileDetails');
    const winRate = user.stats.totalGames > 0 
        ? Math.round((user.stats.totalWins / user.stats.totalGames) * 100)
        : 0;
    
    let avatar = user.avatar || user.gameNickname.charAt(0).toUpperCase();
    
    // –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫–∞ –∏–∑ Telegram, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
    if (avatar === 'telegram' && user.telegramAvatarUrl) {
        avatar = 'üì∑';
    }
    
    container.innerHTML = `
        <div class="user-profile-header">
            <div class="user-avatar-large">${avatar}</div>
            <div class="user-info-large">
                <h3>${user.gameNickname}</h3>
                <p>–†–∞–Ω–≥: ${getRankName(user.stats.currentRank)}</p>
            </div>
        </div>
        <div class="user-stats-details">
            <div class="stat-row">
                <span>–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ:</span>
                <span>${user.stats.totalGames}</span>
            </div>
            <div class="stat-row">
                <span>–ü–æ–±–µ–¥:</span>
                <span>${user.stats.totalWins}</span>
            </div>
            <div class="stat-row">
                <span>–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:</span>
                <span>${winRate}%</span>
            </div>
            <div class="stat-row">
                <span>–û—á–∫–æ–≤:</span>
                <span>${user.stats.points}</span>
            </div>
            <div class="stat-row">
                <span>–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –∏–≥—Ä–∞:</span>
                <span>${getGameTypeName(user.preferredGame)}</span>
            </div>
            ${appData.isAdmin ? `
            <div class="user-details">
                <div class="user-detail-item">
                    <span class="user-detail-label">Telegram ID:</span>
                    <span class="user-detail-value">${user.telegramId}</span>
                </div>
                <div class="user-detail-item">
                    <span class="user-detail-label">Telegram Username:</span>
                    <span class="user-detail-value">@${appData.user?.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</span>
                </div>
                <div class="user-detail-item">
                    <span class="user-detail-label">–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</span>
                    <span class="user-detail-value">${formatDate(user.registrationDate)}</span>
                </div>
            </div>
            ` : ''}
        </div>
    `;
    
    document.getElementById('userProfileModal').style.display = 'block';
}

// –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏
function showAddTournamentModal() {
    if (!appData.isAdmin) return;
    document.getElementById('addTournamentModal').style.display = 'block';
}

function createTournament() {
    if (!appData.isAdmin) return;
    
    const name = document.getElementById('tournamentName').value.trim();
    const date = document.getElementById('tournamentDate').value;
    const duration = parseInt(document.getElementById('tournamentDuration').value);
    const maxPlayers = parseInt(document.getElementById('maxPlayers').value);
    const prize = parseInt(document.getElementById('tournamentPrize').value);
    const type = document.getElementById('tournamentType').value;
    
    if (!name || !date) {
        showAlert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!');
        return;
    }
    
    const newTournament = {
        id: Date.now(),
        name: name,
        status: 'upcoming',
        date: new Date(date).toISOString(),
        duration: duration,
        maxPlayers: maxPlayers,
        prize: prize,
        type: type,
        participants: []
    };
    
    appData.tournaments.push(newTournament);
    Storage.save('tournaments', appData.tournaments);
    
    closeModal('addTournamentModal');
    renderTournaments();
    loadRegisteredUsers();
    showAlert('–¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('tournamentName').value = '';
    document.getElementById('tournamentDate').value = '';
}

function showUsersList() {
    if (!appData.isAdmin) return;
    
    const container = document.getElementById('usersList');
    container.innerHTML = appData.registeredUsers.map(user => {
        const avatar = user.avatar || user.gameNickname.charAt(0).toUpperCase();
        return `
            <div class="user-item" onclick="showUserProfile('${user.gameNickname}')">
                <div class="user-avatar-small">${avatar}</div>
                <div class="user-info-small">
                    <div class="user-name-small">${user.gameNickname}</div>
                    <div class="user-stats-small">
                        ${user.stats.points} –æ—á–∫–æ–≤ ‚Ä¢ ${user.stats.totalGames} –∏–≥—Ä ‚Ä¢ 
                        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ${formatDate(user.registrationDate)}
                    </div>
                    <div class="user-details">
                        <div class="user-detail-item">
                            <span class="user-detail-label">Telegram ID:</span>
                            <span class="user-detail-value">${user.telegramId}</span>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }).join('');
    
    document.getElementById('usersListModal').style.display = 'block';
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
function showAllUsers() {
    if (!appData.isAdmin) return;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    const sortedUsers = [...appData.registeredUsers].sort((a, b) => b.stats.points - a.stats.points);
    
    const container = document.getElementById('usersList');
    container.innerHTML = sortedUsers.map((user, index) => {
        let avatar = user.avatar || user.gameNickname.charAt(0).toUpperCase();
        
        // –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫–∞ –∏–∑ Telegram, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
        if (avatar === 'telegram' && user.telegramAvatarUrl) {
            avatar = 'üì∑';
        }
        
        const winRate = user.stats.totalGames > 0 
            ? Math.round((user.stats.totalWins / user.stats.totalGames) * 100)
            : 0;
            
        return `
            <div class="user-item" onclick="showUserProfile('${user.gameNickname}')">
                <div class="user-rank-badge">${index + 1}</div>
                <div class="user-avatar-small">${avatar}</div>
                <div class="user-info-small">
                    <div class="user-name-small">${user.gameNickname}</div>
                    <div class="user-stats-small">
                        <strong>${user.stats.points} –æ—á–∫–æ–≤</strong> ‚Ä¢ ${user.stats.totalGames} –∏–≥—Ä ‚Ä¢ ${winRate}% –ø–æ–±–µ–¥
                    </div>
                    <div class="user-details">
                        <div class="user-detail-item">
                            <span class="user-detail-label">–†–∞–Ω–≥:</span>
                            <span class="user-detail-value">${getRankName(user.stats.currentRank)}</span>
                        </div>
                        <div class="user-detail-item">
                            <span class="user-detail-label">Telegram ID:</span>
                            <span class="user-detail-value">${user.telegramId}</span>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }).join('');
    
    document.getElementById('usersListModal').style.display = 'block';
}

function showTournamentsManagement() {
    if (!appData.isAdmin) return;
    switchTab('tournaments');
}

// –£—Ç–∏–ª–∏—Ç—ã
function getRankName(rank) {
    const ranks = {
        1: '–ù–æ–≤–∏—á–æ–∫', 2: '–õ—é–±–∏—Ç–µ–ª—å', 3: '–ò–≥—Ä–æ–∫', 4: '–≠–∫—Å–ø–µ—Ä—Ç', 5: '–ú–∞—Å—Ç–µ—Ä', 6: '–ì—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä'
    };
    return ranks[rank] || '–ù–æ–≤–∏—á–æ–∫';
}

function getStatusText(status) {
    const statuses = {
        active: '–ê–∫—Ç–∏–≤–µ–Ω', upcoming: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π', finished: '–ó–∞–≤–µ—Ä—à–µ–Ω'
    };
    return statuses[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function getJoinButtonText(status) {
    const texts = {
        active: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', upcoming: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', finished: '–ó–∞–≤–µ—Ä—à–µ–Ω'
    };
    return texts[status] || '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
}

function getGameTypeName(type) {
    const types = {
        texas: '–¢–µ—Ö–∞—Å—Å–∫–∏–π –•–æ–ª–¥–µ–º', omaha: '–û–º–∞—Ö–∞', stud: '–°—Ç—É–¥', mixed: '–°–º–µ—à–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã'
    };
    return types[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
function switchTab(tabName) {
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    document.getElementById(tabName).classList.add('active');
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
    vibrate();
}

// –í—ã—Ö–æ–¥
function logout() {
    Storage.remove('currentUser');
    appData.currentUser = null;
    appData.isLoggedIn = false;
    appData.isAdmin = false;
    showLoginModal();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–∞–±–∞–º
    document.querySelectorAll('.nav-item').forEach(item => {
        item.addEventListener('click', function() {
            const tab = this.getAttribute('data-tab');
            switchTab(tab);
        });
    });
    
    // –§–∏–ª—å—Ç—Ä—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            filterTournaments(this.getAttribute('data-filter'));
        });
    });
    
    // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    document.getElementById('joinTournament')?.addEventListener('click', function() {
        switchTab('tournaments');
        vibrate();
    });
    
    document.getElementById('viewRating')?.addEventListener('click', function() {
        switchTab('rating');
        vibrate();
    });
    
    document.getElementById('viewAchievements')?.addEventListener('click', function() {
        switchTab('profile');
        vibrate();
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤
    document.getElementById('refreshTournaments')?.addEventListener('click', function() {
        this.style.transform = 'rotate(360deg)';
        setTimeout(() => {
            this.style.transform = 'rotate(0deg)';
        }, 500);
        loadTournaments();
        showAlert('–¢—É—Ä–Ω–∏—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    });
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
function filterTournaments(filter) {
    const tournaments = appData.tournaments;
    let filtered = tournaments;
    
    if (filter !== 'all') {
        filtered = tournaments.filter(t => t.status === filter);
    }
    
    renderTournaments(filtered);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showAlert(message) {
    tg.showAlert(message);
    console.log('Alert:', message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–±—Ä–∞—Ü–∏–∏
function vibrate() {
    if (tg.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('medium');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
function applyTheme() {
    const body = document.body;
    
    if (tg.colorScheme === 'dark') {
        body.classList.add('dark-theme');
    } else {
        body.classList.remove('dark-theme');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initApp();
    applyTheme();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
tg.onEvent('themeChanged', applyTheme);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
tg.onEvent('viewportChanged', function() {
    console.log('–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è');
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏
function showAvatarModal() {
    appData.selectedAvatar = appData.currentUser?.avatar || 'üë§';
    document.getElementById('avatarPreview').textContent = appData.selectedAvatar;
    document.getElementById('avatarModal').style.display = 'block';
}

function selectEmojiAvatar(emoji) {
    appData.selectedAvatar = emoji;
    document.getElementById('avatarPreview').textContent = emoji;
    
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –æ–ø—Ü–∏–π
    document.querySelectorAll('.avatar-option').forEach(option => {
        option.classList.remove('selected');
    });
    
    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
    event.target.classList.add('selected');
}

function uploadAvatar() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    showAlert('–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö');
}

function saveAvatar() {
    if (appData.currentUser) {
        appData.currentUser.avatar = appData.selectedAvatar;
        Storage.save('currentUser', appData.currentUser);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ
        const userIndex = appData.registeredUsers.findIndex(u => u.telegramId === appData.currentUser.telegramId);
        if (userIndex !== -1) {
            appData.registeredUsers[userIndex].avatar = appData.selectedAvatar;
            Storage.save('registeredUsers', appData.registeredUsers);
        }
        
        closeModal('avatarModal');
        loadUserData();
        showAlert('–ê–≤–∞—Ç–∞—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
function finishTournament(tournamentId) {
    if (!appData.isAdmin) return;
    
    const tournament = appData.tournaments.find(t => t.id === tournamentId);
    if (!tournament) return;
    
    tournament.status = 'finished';
    Storage.save('tournaments', appData.tournaments);
    renderTournaments();
    showAlert(`–¢—É—Ä–Ω–∏—Ä "${tournament.name}" –∑–∞–≤–µ—Ä—à–µ–Ω!`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –≤—Ä–µ–º—è" –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
function switchRatingPeriod(period) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–º–µ–Ω—ã –ø–µ—Ä–∏–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    document.querySelectorAll('.period-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    loadRating();
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.joinTournament = joinTournament;
window.switchTab = switchTab;
window.filterTournaments = filterTournaments;
window.showTournamentParticipants = showTournamentParticipants;
window.showUserProfile = showUserProfile;
window.showAddTournamentModal = showAddTournamentModal;
window.createTournament = createTournament;
window.showUsersList = showUsersList;
window.showTournamentsManagement = showTournamentsManagement;
window.closeModal = closeModal;
window.loginAsUser = loginAsUser;
window.loginAsAdmin = loginAsAdmin;
window.registerUser = registerUser;
window.logout = logout;
window.showAvatarModal = showAvatarModal;
window.selectEmojiAvatar = selectEmojiAvatar;
window.uploadAvatar = uploadAvatar;
window.saveAvatar = saveAvatar;
window.finishTournament = finishTournament;
window.switchRatingPeriod = switchRatingPeriod;
window.showAllUsers = showAllUsers;

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.TelegramApp = {
    showAlert,
    vibrate,
    tg,
    appData
};
