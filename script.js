// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
let tg = window.Telegram.WebApp;

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ Telegram
if (!tg) {
    console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞');
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_BASE = 'https://poker-club-server-1.onrender.com/api';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
async function checkApiConnection() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...');
        const response = await fetch(`${API_BASE}/users`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        });
        
        if (response.ok) {
            console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);
            return true;
        } else {
            console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:', error);
        return false;
    }
}

// API –æ–±—ä–µ–∫—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
const API = {
    async getUsers() {
        try {
            console.log('üîç –ó–∞–ø—Ä–æ—Å –∫ API:', `${API_BASE}/users`);
            const response = await fetch(`${API_BASE}/users`);
            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            const data = await response.json();
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);
            return data;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ API getUsers:', error);
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ${error.message}`);
        }
    },

    async getUserByTelegramId(telegramId) {
        const response = await fetch(`${API_BASE}/users/telegram/${telegramId}`);
        if (response.status === 404) return null;
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return await response.json();
    },

    async createUser(userData) {
        const response = await fetch(`${API_BASE}/users`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(userData)
        });
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
        return await response.json();
    },

    async updateUser(userId, userData) {
        const response = await fetch(`${API_BASE}/users/${userId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(userData)
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return await response.json();
    },

    async getTournaments() {
        const response = await fetch(`${API_BASE}/big-tournaments`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        return await response.json();
    },

    async createTournament(tournamentData) {
        const response = await fetch(`${API_BASE}/big-tournaments`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(tournamentData)
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞');
        return await response.json();
    },

    async joinTournament(tournamentId, userId) {
        const response = await fetch(`${API_BASE}/tournaments/${tournamentId}/join`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId })
        });
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ç—É—Ä–Ω–∏—Ä—É');
        }
        return await response.json();
    },

    async updateTournamentStatus(tournamentId, status) {
        const response = await fetch(`${API_BASE}/tournaments/${tournamentId}/status`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status })
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞');
        return await response.json();
    },

    async getStats() {
        const response = await fetch(`${API_BASE}/admin/stats`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        return await response.json();
    },

    // ============================================
    // API –î–õ–Ø –ò–ì–† –ò –¢–£–†–ù–ò–†–û–í V2.0
    // ============================================

    // –ë–æ–ª—å—à–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã
    async getBigTournaments() {
        try {
            console.log('üîç –ó–∞–ø—Ä–æ—Å –∫ API:', `${API_BASE}/big-tournaments`);
            const response = await fetch(`${API_BASE}/big-tournaments`);
            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            const data = await response.json();
            console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã:', data);
            return data;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ API getBigTournaments:', error);
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤: ${error.message}`);
        }
    },

    async getActiveTournaments() {
        const response = await fetch(`${API_BASE}/big-tournaments/active`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        return await response.json();
    },

    async createBigTournament(tournamentData) {
        const response = await fetch(`${API_BASE}/big-tournaments`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(tournamentData)
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞');
        return await response.json();
    },

    // –ò–≥—Ä—ã
    async getGames(tournamentId = null) {
        try {
            const url = tournamentId ? `${API_BASE}/games?tournamentId=${tournamentId}` : `${API_BASE}/games`;
            console.log('üîç –ó–∞–ø—Ä–æ—Å –∫ API:', url);
            const response = await fetch(url);
            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            const data = await response.json();
            console.log('‚úÖ –ò–≥—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã:', data);
            return data;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ API getGames:', error);
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä: ${error.message}`);
        }
    },

    async getGame(gameId) {
        const response = await fetch(`${API_BASE}/games/${gameId}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã');
        return await response.json();
    },

    async createGame(gameData) {
        const response = await fetch(`${API_BASE}/games`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(gameData)
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã');
        return await response.json();
    },

    async updateGameStatus(gameId, status) {
        const response = await fetch(`${API_BASE}/games/${gameId}/status`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status })
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã');
        return await response.json();
    },

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—ã
    async registerForGame(gameId, userId) {
        const response = await fetch(`${API_BASE}/games/${gameId}/register`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId })
        });
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∏–≥—Ä—É');
        }
        return await response.json();
    },

    async cancelGameRegistration(gameId, userId) {
        const response = await fetch(`${API_BASE}/games/${gameId}/cancel`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId })
        });
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        }
        return await response.json();
    },

    async markGamePayment(gameId, userId, isPaid) {
        const response = await fetch(`${API_BASE}/games/${gameId}/mark-paid`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId, isPaid })
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã');
        return await response.json();
    },

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä
    async saveGameResults(gameId, results) {
        const response = await fetch(`${API_BASE}/games/${gameId}/results`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ results })
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        return await response.json();
    },

    async getGameResults(gameId) {
        const response = await fetch(`${API_BASE}/games/${gameId}/results`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        return await response.json();
    },

    // –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    async getTournamentStandings(tournamentId) {
        const response = await fetch(`${API_BASE}/tournaments/${tournamentId}/standings`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã');
        return await response.json();
    },

    async getMyTournamentStanding(tournamentId, userId) {
        const response = await fetch(`${API_BASE}/tournaments/${tournamentId}/my-standing/${userId}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–µ–π –ø–æ–∑–∏—Ü–∏–∏');
        return await response.json();
    },

    // –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä
    async getUserGameHistory(userId, tournamentId = null) {
        const url = tournamentId ? 
            `${API_BASE}/users/${userId}/game-history?tournamentId=${tournamentId}` : 
            `${API_BASE}/users/${userId}/game-history`;
        const response = await fetch(url);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä');
        return await response.json();
    }
};

// –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let appData = {
    user: null,
    currentUser: null,
    isAdmin: false,
    isLoggedIn: false,
    stats: {
        totalWins: 0,
        totalGames: 0,
        currentRank: 1,
        points: 0
    },
    tournaments: [],
    rating: [],
    achievements: [],
    registeredUsers: [],
    tournamentParticipants: {},
    selectedAvatar: null
};

// ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const ADMIN_TELEGRAM_ID = 609464085;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    if (tg) {
        tg.expand();
        tg.enableClosingConfirmation();
        appData.user = tg.initDataUnsafe.user;
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', appData.user);
    } else {
        console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞');
    }
    
    await initializeData();
    setupEventListeners();
    await checkAuthentication();
    console.log("‚úÖ Poker Club Mini App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
async function initializeData() {
    try {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
        console.log('üåê API_BASE:', API_BASE);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        const apiAvailable = await checkApiConnection();
        if (!apiAvailable) {
            console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
            showAlert('–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã
        appData.registeredUsers = [];
        appData.tournaments = [];
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showAlert(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function checkAuthentication() {
    try {
        if (!appData.user) {
            showLoginModal();
            return;
        }

        const telegramId = appData.user.id.toString();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const user = await API.getUserByTelegramId(telegramId);
        
        if (user) {
            appData.currentUser = user;
            appData.isLoggedIn = true;
            appData.isAdmin = parseInt(telegramId) === ADMIN_TELEGRAM_ID;
            loadAllData();
            updateUserInterface();
        } else {
            showLoginModal();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        showLoginModal();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
function showLoginModal() {
    const modal = document.getElementById('loginModal');
    const adminBtn = document.getElementById('adminLoginBtn');
    
    if (appData.user && appData.user.id === ADMIN_TELEGRAM_ID) {
        adminBtn.style.display = 'block';
    } else {
        adminBtn.style.display = 'none';
    }
    
    modal.style.display = 'block';
}

// –í—Ö–æ–¥ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async function loginAsUser() {
    closeModal('loginModal');
    
    try {
        const user = await API.getUserByTelegramId(appData.user.id);
        
        if (user) {
            appData.currentUser = user;
            appData.isLoggedIn = true;
            appData.isAdmin = false;
            updateUserInterface();
            loadAllData();
        } else {
            showRegistrationModal();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        showAlert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    }
}

// –í—Ö–æ–¥ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
async function loginAsAdmin() {
    closeModal('loginModal');
    
    try {
        const user = await API.getUserByTelegramId(appData.user.id);
        
        if (user) {
            appData.currentUser = user;
            appData.isLoggedIn = true;
            appData.isAdmin = true;
            updateUserInterface();
            loadAllData();
        } else {
            // –°–æ–∑–¥–∞—ë–º –∞–¥–º–∏–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            const adminUser = {
                telegramId: appData.user.id,
                telegramName: appData.user.first_name,
                telegramUsername: appData.user.username || null,
                gameNickname: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                preferredGame: 'mixed',
                avatar: 'üëë',
                telegramAvatarUrl: null
            };
            
            const newUser = await API.createUser(adminUser);
            appData.currentUser = newUser;
            appData.isLoggedIn = true;
            appData.isAdmin = true;
            
            await initializeData();
            updateUserInterface();
            loadAllData();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∞:', error);
        showAlert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
function showRegistrationModal() {
    closeModal('loginModal');
    document.getElementById('registrationModal').style.display = 'block';
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser() {
    const nickname = document.getElementById('gameNickname').value.trim();
    const preferredGame = document.getElementById('preferredGame').value;
    
    if (!nickname) {
        showAlert('–í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º!');
        return;
    }
    
    try {
        const userData = {
            telegramId: appData.user.id,
            telegramName: appData.user.first_name,
            telegramUsername: appData.user.username || null,
            gameNickname: nickname,
            preferredGame: preferredGame,
            avatar: 'üë§',
            telegramAvatarUrl: appData.user.photo_url || null
        };
        
        const newUser = await API.createUser(userData);
        
        appData.currentUser = newUser;
        appData.isLoggedIn = true;
        appData.isAdmin = false;
        
        await initializeData();
        
        closeModal('registrationModal');
        updateUserInterface();
        loadAllData();
        showAlert(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Poker Club, ${nickname}! üéâ`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        showAlert(error.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadAllData() {
    await initializeData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
    loadUserData();
    loadTournaments();
    loadRating();
    loadAchievements();
    loadRegisteredUsers();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserData() {
    if (appData.currentUser) {
        document.getElementById('userName').textContent = appData.currentUser.gameNickname;
        document.getElementById('userRank').textContent = getRankName(appData.currentUser.stats?.currentRank || 1);
        document.getElementById('profileName').textContent = appData.currentUser.gameNickname;
        document.getElementById('profileRank').textContent = `–†–∞–Ω–≥: ${getRankName(appData.currentUser.stats?.currentRank || 1)}`;
        document.getElementById('userNickname').textContent = appData.currentUser.gameNickname;
        document.getElementById('profileNickname').style.display = 'block';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
        const profileAvatarEl = document.getElementById('profileAvatar');
        const userAvatarEl = document.getElementById('userAvatar');
        
        if (appData.currentUser.avatar === 'custom' && (appData.currentUser.customAvatarUrl || appData.currentUser.telegramAvatarUrl)) {
            const avatarUrl = appData.currentUser.customAvatarUrl || appData.currentUser.telegramAvatarUrl;
            profileAvatarEl.innerHTML = `<img src="${avatarUrl}" style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">`;
            userAvatarEl.innerHTML = `<img src="${avatarUrl}" style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">`;
        } else {
            const avatar = appData.currentUser.avatar || 'üë§';
            profileAvatarEl.textContent = avatar;
            userAvatarEl.textContent = avatar;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const stats = appData.currentUser.stats || {};
        document.getElementById('totalWins').textContent = stats.totalWins || 0;
        document.getElementById('totalGames').textContent = stats.totalGames || 0;
        document.getElementById('currentRank').textContent = stats.currentRank || 1;
        document.getElementById('profileGames').textContent = stats.totalGames || 0;
        document.getElementById('profileWins').textContent = stats.totalWins || 0;
        document.getElementById('profilePoints').textContent = stats.points || 0;
        
        const winRate = stats.totalGames > 0 
            ? Math.round((stats.totalWins / stats.totalGames) * 100)
            : 0;
        document.getElementById('profileWinRate').textContent = `${winRate}%`;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
async function loadTournaments() {
    try {
        console.log('üèÜ –ó–∞–≥—Ä—É–∂–∞—é —Ç—É—Ä–Ω–∏—Ä—ã —Å —Å–µ—Ä–≤–µ—Ä–∞...');
        appData.tournaments = await API.getBigTournaments();
        console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', appData.tournaments.length);
        
        updateTournamentStatuses();
        renderTournaments();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', error);
        showAlert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤: ${error.message}`);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤
function updateTournamentStatuses() {
    const now = new Date();
    
    appData.tournaments.forEach(tournament => {
        const tournamentDate = new Date(tournament.date);
        
        if (tournament.status === 'upcoming' && now >= tournamentDate) {
            tournament.status = 'active';
        }
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
function loadRating() {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º
    const sortedUsers = [...appData.registeredUsers].sort((a, b) => (b.stats?.points || 0) - (a.stats?.points || 0));
    appData.rating = sortedUsers.slice(0, 10).map((user, index) => ({
        rank: index + 1,
        name: user.gameNickname,
        points: user.stats?.points || 0,
        avatar: index === 0 ? "üëë" : index === 1 ? "ü•á" : index === 2 ? "ü•à" : "‚≠ê"
    }));
    renderRating();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function loadAchievements() {
    const stats = appData.currentUser?.stats || {};
    const totalGames = stats.totalGames || 0;
    const totalWins = stats.totalWins || 0;
    const points = stats.points || 0;
    
    appData.achievements = [
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–æ–±–µ–¥—ã
        { id: 1, name: "–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞", desc: "–í—ã–∏–≥—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –∏–≥—Ä—É", icon: "üèÜ", unlocked: totalWins >= 1 },
        { id: 2, name: "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å", desc: "–í—ã–∏–≥—Ä–∞—Ç—å 5 –∏–≥—Ä", icon: "ü•á", unlocked: totalWins >= 5 },
        { id: 3, name: "–°—Ç—Ä–∞—Ç–µ–≥", desc: "–í—ã–∏–≥—Ä–∞—Ç—å 10 –∏–≥—Ä", icon: "üß†", unlocked: totalWins >= 10 },
        { id: 4, name: "–ú–∞—Å—Ç–µ—Ä –∏–≥—Ä—ã", desc: "–í—ã–∏–≥—Ä–∞—Ç—å 25 –∏–≥—Ä", icon: "‚≠ê", unlocked: totalWins >= 25 },
        { id: 5, name: "–õ–µ–≥–µ–Ω–¥–∞ –ø–æ–∫–µ—Ä–∞", desc: "–í—ã–∏–≥—Ä–∞—Ç—å 50 –∏–≥—Ä", icon: "üëë", unlocked: totalWins >= 50 },
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        { id: 6, name: "–ù–æ–≤–∏—á–æ–∫", desc: "–°—ã–≥—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –∏–≥—Ä—É", icon: "üéØ", unlocked: totalGames >= 1 },
        { id: 7, name: "–õ—é–±–∏—Ç–µ–ª—å", desc: "–°—ã–≥—Ä–∞—Ç—å 10 –∏–≥—Ä", icon: "üéÆ", unlocked: totalGames >= 10 },
        { id: 8, name: "–ù–∞—Å—Ç–æ–π—á–∏–≤—ã–π", desc: "–°—ã–≥—Ä–∞—Ç—å 25 –∏–≥—Ä", icon: "üí™", unlocked: totalGames >= 25 },
        { id: 9, name: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª", desc: "–°—ã–≥—Ä–∞—Ç—å 50 –∏–≥—Ä", icon: "üé™", unlocked: totalGames >= 50 },
        { id: 10, name: "–í–µ—Ç–µ—Ä–∞–Ω", desc: "–°—ã–≥—Ä–∞—Ç—å 100 –∏–≥—Ä", icon: "üéñÔ∏è", unlocked: totalGames >= 100 },
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –æ—á–∫–∏
        { id: 11, name: "–ü–µ—Ä–≤—ã–µ –æ—á–∫–∏", desc: "–ù–∞–±—Ä–∞—Ç—å 100 –æ—á–∫–æ–≤", icon: "üíé", unlocked: points >= 100 },
        { id: 12, name: "–ë–æ–≥–∞—á", desc: "–ù–∞–±—Ä–∞—Ç—å 500 –æ—á–∫–æ–≤", icon: "üí∞", unlocked: points >= 500 },
        { id: 13, name: "–ú–∏–ª–ª–∏–æ–Ω–µ—Ä", desc: "–ù–∞–±—Ä–∞—Ç—å 1000 –æ—á–∫–æ–≤", icon: "üíµ", unlocked: points >= 1000 },
        { id: 14, name: "–ú–∞–≥–Ω–∞—Ç", desc: "–ù–∞–±—Ä–∞—Ç—å 5000 –æ—á–∫–æ–≤", icon: "üè∞", unlocked: points >= 5000 },
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        { id: 15, name: "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π", desc: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ 5 —Ç—É—Ä–Ω–∏—Ä–∞–º", icon: "ü§ù", unlocked: false },
        { id: 16, name: "–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç", desc: "–í—ã–∏–≥—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –∏–≥—Ä—É –∑–∞ 1 —á–∞—Å –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", icon: "‚ö°", unlocked: false },
        { id: 17, name: "–£–¥–∞—á–∞ –Ω–æ–≤–∏—á–∫–∞", desc: "–í—ã–∏–≥—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3 –∏–≥—Ä—ã –ø–æ–¥—Ä—è–¥", icon: "üçÄ", unlocked: false },
        { id: 18, name: "–ù–µ–ø–æ–±–µ–¥–∏–º—ã–π", desc: "–í—ã–∏–≥—Ä–∞—Ç—å 10 –∏–≥—Ä –ø–æ–¥—Ä—è–¥", icon: "üî•", unlocked: false },
        { id: 19, name: "–ö–æ—Ä–æ–ª—å —Ç—É—Ä–Ω–∏—Ä–æ–≤", desc: "–ó–∞–Ω—è—Ç—å 1 –º–µ—Å—Ç–æ –≤ 3 —Ç—É—Ä–Ω–∏—Ä–∞—Ö", icon: "üé≠", unlocked: false },
        { id: 20, name: "–ú–∞—Å—Ç–µ—Ä –±–ª–µ—Ñ–∞", desc: "–í—ã–∏–≥—Ä–∞—Ç—å –∏–≥—Ä—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä—É–∫–æ–π", icon: "üÉè", unlocked: false }
    ];
    renderAchievements();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadRegisteredUsers() {
    if (appData.isAdmin) {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            appData.registeredUsers = await API.getUsers();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const stats = await API.getStats();
            document.getElementById('totalUsers').textContent = stats.totalUsers || 0;
            document.getElementById('totalTournaments').textContent = stats.totalTournaments || 0;
            document.getElementById('activeGames').textContent = stats.activeGames || 0;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUserInterface() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏
    const addTournamentBtn = document.getElementById('addTournamentBtn');
    if (addTournamentBtn) {
        addTournamentBtn.style.display = appData.isAdmin ? 'block' : 'none';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    updateNavigation();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function updateNavigation() {
    const bottomNav = document.querySelector('.bottom-nav');
    
    if (appData.isAdmin && !document.querySelector('[data-tab="admin"]')) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-—Ç–∞–±
        const adminTab = document.createElement('button');
        adminTab.className = 'nav-item';
        adminTab.setAttribute('data-tab', 'admin');
        adminTab.innerHTML = '<i class="fas fa-crown"></i><span>–ê–¥–º–∏–Ω</span>';
        adminTab.addEventListener('click', function() {
            switchTab('admin');
        });
        bottomNav.appendChild(adminTab);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤
function renderTournaments(tournaments = appData.tournaments) {
    const container = document.getElementById('tournamentsList');
    if (!container) return;
    
    if (tournaments.length === 0) {
        container.innerHTML = '<p style="text-align: center; padding: 40px; color: #7f8c8d;">–¢—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>';
        return;
    }
    
    container.innerHTML = tournaments.map(tournament => {
        const participantsCount = tournament.participants ? tournament.participants.length : 0;
        const isParticipant = tournament.participants && tournament.participants.some(p => p.id === appData.currentUser?.id);
        
        return `
            <div class="tournament-card">
                <div class="tournament-header">
                    <h3>${tournament.name}</h3>
                    <span class="tournament-status ${tournament.status}">
                        ${getStatusText(tournament.status)}
                    </span>
                </div>
                <div class="tournament-info">
                    <div class="info-item">
                        <i class="fas fa-clock"></i>
                        <span>${formatDate(tournament.date)}</span>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-users"></i>
                        <span>${participantsCount}/${tournament.max_players} –∏–≥—Ä–æ–∫–æ–≤</span>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-trophy"></i>
                        <span>–ü—Ä–∏–∑: ${tournament.prize} –æ—á–∫–æ–≤</span>
                    </div>
                </div>
                <div class="tournament-actions">
                    <button class="btn-participants" onclick="showTournamentParticipants(${tournament.id})">
                        <i class="fas fa-users"></i>
                    </button>
                    <button class="btn-join" onclick="joinTournament(${tournament.id})" ${isParticipant ? 'disabled' : ''}>
                        ${isParticipant ? '–£—á–∞—Å—Ç–≤—É—é' : getJoinButtonText(tournament.status)}
                    </button>
                </div>
                ${appData.isAdmin && tournament.status === 'active' ? `
                <div class="tournament-management">
                    <button class="btn-finish" onclick="finishTournament(${tournament.id})">
                        <i class="fas fa-stop"></i>
                        –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä
                    </button>
                </div>
                ` : ''}
            </div>
        `;
    }).join('');
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
function renderRating() {
    const container = document.getElementById('ratingList');
    if (!container) return;
    
    if (appData.rating.length === 0) {
        container.innerHTML = '<p style="text-align: center; padding: 40px; color: #7f8c8d;">–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç</p>';
        return;
    }
    
    container.innerHTML = appData.rating.map(player => `
        <div class="rating-item" onclick="showUserProfile('${player.name}')">
            <div class="rank">${player.rank}</div>
            <div class="player-info">
                <div class="player-name">${player.name}</div>
                <div class="player-stats">${player.points} –æ—á–∫–æ–≤</div>
            </div>
            <div class="player-avatar">${player.avatar}</div>
        </div>
    `).join('');
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function renderAchievements() {
    const container = document.getElementById('achievementsList');
    if (!container) return;
    
    if (!appData.achievements || appData.achievements.length === 0) {
        container.innerHTML = '<p style="text-align: center; padding: 20px; color: #7f8c8d;">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</p>';
        return;
    }
    
    container.innerHTML = appData.achievements.map(achievement => `
        <div class="achievement-item ${achievement.unlocked ? 'unlocked' : 'locked'}">
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-info">
                <div class="achievement-name">${achievement.name}</div>
                <div class="achievement-desc">${achievement.desc}</div>
            </div>
        </div>
    `).join('');
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É
async function joinTournament(tournamentId) {
    try {
        if (!appData.currentUser) {
            showAlert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
            return;
        }
        
        await API.joinTournament(tournamentId, appData.currentUser.id);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
        appData.tournaments = await API.getTournaments();
        
        renderTournaments();
        
        const tournament = appData.tournaments.find(t => t.id === tournamentId);
        showAlert(`–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É "${tournament.name}"!`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        addActivity('üéØ', `–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Ç—É—Ä–Ω–∏—Ä "${tournament.name}"`);
        
        vibrate();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ç—É—Ä–Ω–∏—Ä—É:', error);
        showAlert(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ç—É—Ä–Ω–∏—Ä—É');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
async function showTournamentParticipants(tournamentId) {
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
    await initializeData();
    
    const tournament = appData.tournaments.find(t => t.id === tournamentId);
    if (!tournament) return;
    
    const participants = tournament.participants || [];
    const container = document.getElementById('participantsList');
    
    if (participants.length === 0) {
        container.innerHTML = '<p style="text-align: center; padding: 40px; color: #7f8c8d;">–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>';
    } else {
        container.innerHTML = participants.map((participant, index) => {
            const avatar = participant.avatar || participant.nickname.charAt(0).toUpperCase();
            return `
                <div class="participant-item" onclick="showUserProfile('${participant.nickname}')">
                    <div class="user-avatar-small">${avatar}</div>
                    <div class="user-info-small">
                        <div class="user-name-small">${participant.nickname}</div>
                        <div class="user-stats-small">–£—á–∞—Å—Ç–Ω–∏–∫ —Å ${formatDate(participant.joinDate)}</div>
                    </div>
                </div>
            `;
        }).join('');
    }
    
    document.getElementById('participantsModal').style.display = 'block';
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function showUserProfile(nickname) {
    const user = appData.registeredUsers.find(u => u.gameNickname === nickname);
    if (!user) return;
    
    const container = document.getElementById('userProfileDetails');
    const stats = user.stats || {};
    const winRate = stats.totalGames > 0 
        ? Math.round((stats.totalWins / stats.totalGames) * 100)
        : 0;
    
    const avatar = user.avatar || user.gameNickname.charAt(0).toUpperCase();
    
    container.innerHTML = `
        <div class="user-profile-header">
            <div class="user-avatar-large">${avatar}</div>
            <div class="user-info-large">
                <h3>${user.gameNickname}</h3>
                <p>–†–∞–Ω–≥: ${getRankName(stats.currentRank || 1)}</p>
            </div>
        </div>
        <div class="user-stats-details">
            <div class="stat-row">
                <span>–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ:</span>
                <span>${stats.totalGames || 0}</span>
            </div>
            <div class="stat-row">
                <span>–ü–æ–±–µ–¥:</span>
                <span>${stats.totalWins || 0}</span>
            </div>
            <div class="stat-row">
                <span>–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:</span>
                <span>${winRate}%</span>
            </div>
            <div class="stat-row">
                <span>–û—á–∫–æ–≤:</span>
                <span>${stats.points || 0}</span>
            </div>
            <div class="stat-row">
                <span>–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –∏–≥—Ä–∞:</span>
                <span>${getGameTypeName(user.preferredGame)}</span>
            </div>
            ${appData.isAdmin ? `
            <div class="user-details">
                <div class="user-detail-item">
                    <span class="user-detail-label">Telegram ID:</span>
                    <span class="user-detail-value">${user.telegramId}</span>
                </div>
                <div class="user-detail-item">
                    <span class="user-detail-label">Telegram Username:</span>
                    <span class="user-detail-value">@${user.telegramUsername || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</span>
                </div>
                <div class="user-detail-item">
                    <span class="user-detail-label">–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</span>
                    <span class="user-detail-value">${formatDate(user.registrationDate)}</span>
                </div>
            </div>
            ` : ''}
        </div>
    `;
    
    document.getElementById('userProfileModal').style.display = 'block';
}

// –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏
function showAddTournamentModal() {
    if (!appData.isAdmin) return;
    document.getElementById('addTournamentModal').style.display = 'block';
}

async function createTournament() {
    if (!appData.isAdmin) return;
    
    const name = document.getElementById('tournamentName').value.trim();
    const description = document.getElementById('tournamentDescription').value.trim();
    const duration = parseInt(document.getElementById('tournamentDuration').value) || 2;
    const maxPlayers = parseInt(document.getElementById('tournamentMaxPlayers').value) || 20;
    const gameType = document.getElementById('tournamentGameType').value;
    
    if (!name) {
        showAlert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞!');
        return;
    }
    
    try {
        const tournamentData = {
            name: name,
            description: description,
            startDate: new Date().toISOString(),
            topPlayersCount: 20
        };
        
        await API.createTournament(tournamentData);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
        appData.tournaments = await API.getTournaments();
        
        closeModal('addTournamentModal');
        renderTournaments();
        loadRegisteredUsers();
        showAlert('–¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('tournamentName').value = '';
        document.getElementById('tournamentDate').value = '';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', error);
        showAlert(error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞');
    }
}

async function showUsersList() {
    if (!appData.isAdmin) return;
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    await initializeData();
    
    const container = document.getElementById('usersList');
    container.innerHTML = appData.registeredUsers.map(user => {
        const avatar = user.avatar || user.gameNickname.charAt(0).toUpperCase();
        const stats = user.stats || {};
        return `
            <div class="user-item" onclick="showUserProfile('${user.gameNickname}')">
                <div class="user-avatar-small">${avatar}</div>
                <div class="user-info-small">
                    <div class="user-name-small">${user.gameNickname}</div>
                    <div class="user-stats-small">
                        ${stats.points || 0} –æ—á–∫–æ–≤ ‚Ä¢ ${stats.totalGames || 0} –∏–≥—Ä ‚Ä¢ 
                        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ${formatDate(user.registrationDate)}
                    </div>
                    <div class="user-details">
                        <div class="user-detail-item">
                            <span class="user-detail-label">Telegram ID:</span>
                            <span class="user-detail-value">${user.telegramId}</span>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }).join('');
    
    document.getElementById('usersListModal').style.display = 'block';
}

function showTournamentsManagement() {
    if (!appData.isAdmin) return;
    switchTab('tournaments');
}

// –£—Ç–∏–ª–∏—Ç—ã
function getRankName(rank) {
    const ranks = {
        1: '–ù–æ–≤–∏—á–æ–∫', 2: '–õ—é–±–∏—Ç–µ–ª—å', 3: '–ò–≥—Ä–æ–∫', 4: '–≠–∫—Å–ø–µ—Ä—Ç', 5: '–ú–∞—Å—Ç–µ—Ä', 6: '–ì—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä'
    };
    return ranks[rank] || '–ù–æ–≤–∏—á–æ–∫';
}

function getStatusText(status) {
    const statuses = {
        active: '–ê–∫—Ç–∏–≤–µ–Ω', upcoming: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π', finished: '–ó–∞–≤–µ—Ä—à–µ–Ω'
    };
    return statuses[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function getJoinButtonText(status) {
    const texts = {
        active: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', upcoming: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', finished: '–ó–∞–≤–µ—Ä—à–µ–Ω'
    };
    return texts[status] || '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
}

function getGameTypeName(type) {
    const types = {
        texas: '–¢–µ—Ö–∞—Å—Å–∫–∏–π –•–æ–ª–¥–µ–º', omaha: '–û–º–∞—Ö–∞', stud: '–°—Ç—É–¥', mixed: '–°–º–µ—à–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã'
    };
    return types[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
function switchTab(tabName) {
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    document.getElementById(tabName).classList.add('active');
    const navItem = document.querySelector(`[data-tab="${tabName}"]`);
    if (navItem) navItem.classList.add('active');
    vibrate();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    switch(tabName) {
        case 'home':
            loadUserData();
            break;
        case 'games':
            loadGames();
            break;
        case 'tournaments':
            loadTournaments();
            break;
        case 'rating':
            loadRating();
            break;
        case 'profile':
            loadUserData();
            break;
        case 'admin':
            loadAdminData();
            break;
    }
}

// –í—ã—Ö–æ–¥
function logout() {
    appData.currentUser = null;
    appData.isLoggedIn = false;
    appData.isAdmin = false;
    showLoginModal();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–∞–±–∞–º
    document.querySelectorAll('.nav-item').forEach(item => {
        item.addEventListener('click', function() {
            const tab = this.getAttribute('data-tab');
            switchTab(tab);
        });
    });
    
    // –§–∏–ª—å—Ç—Ä—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            filterTournaments(this.getAttribute('data-filter'));
        });
    });
    
    // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    document.getElementById('joinTournament')?.addEventListener('click', function() {
        switchTab('tournaments');
        vibrate();
    });
    
    document.getElementById('viewRating')?.addEventListener('click', function() {
        switchTab('rating');
        vibrate();
    });
    
    document.getElementById('viewAchievements')?.addEventListener('click', function() {
        switchTab('profile');
        vibrate();
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤
    document.getElementById('refreshTournaments')?.addEventListener('click', async function() {
        this.style.transform = 'rotate(360deg)';
        setTimeout(() => {
            this.style.transform = 'rotate(0deg)';
        }, 500);
        await initializeData();
        loadTournaments();
        showAlert('–¢—É—Ä–Ω–∏—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    });
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
function filterTournaments(filter) {
    const tournaments = appData.tournaments;
    let filtered = tournaments;
    
    if (filter !== 'all') {
        filtered = tournaments.filter(t => t.status === filter);
    }
    
    renderTournaments(filtered);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showAlert(message) {
    console.log('üö® Alert:', message);
    if (tg && tg.showAlert) {
        tg.showAlert(message);
    } else {
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        alert(message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–±—Ä–∞—Ü–∏–∏
function vibrate() {
    if (tg && tg.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('medium');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
function applyTheme() {
    const body = document.body;
    const isDark = (tg && tg.colorScheme === 'dark') || body.classList.contains('force-dark-theme');
    
    if (isDark) {
        body.classList.add('dark-theme');
    } else {
        body.classList.remove('dark-theme');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
    updateThemeIcon();
}

// –û–±–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É —Ç–µ–º—ã
function updateThemeIcon() {
    const body = document.body;
    const isDark = body.classList.contains('dark-theme');
    
    const themeIcon = document.getElementById('themeIcon');
    const themeText = document.getElementById('themeText');
    
    if (themeIcon) {
        themeIcon.className = isDark ? 'fas fa-sun' : 'fas fa-moon';
    }
    
    if (themeText) {
        themeText.textContent = isDark ? '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞' : '–¢—ë–º–Ω–∞—è —Ç–µ–º–∞';
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É –≤—Ä—É—á–Ω—É—é
function toggleTheme() {
    const body = document.body;
    
    if (body.classList.contains('dark-theme')) {
        body.classList.remove('dark-theme');
        body.classList.remove('force-dark-theme');
        localStorage.setItem('poker_club_theme', 'light');
    } else {
        body.classList.add('dark-theme');
        body.classList.add('force-dark-theme');
        localStorage.setItem('poker_club_theme', 'dark');
    }
    
    updateThemeIcon();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const themeName = body.classList.contains('dark-theme') ? '—Ç—ë–º–Ω—É—é' : '—Å–≤–µ—Ç–ª—É—é';
    addActivity('üé®', `–í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ ${themeName} —Ç–µ–º—É`);
    
    showAlert(`–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${themeName}`);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏
function showAvatarModal() {
    appData.selectedAvatar = appData.currentUser?.avatar || 'üë§';
    document.getElementById('avatarPreview').textContent = appData.selectedAvatar;
    document.getElementById('avatarModal').style.display = 'block';
}

function selectEmojiAvatar(emoji) {
    appData.selectedAvatar = emoji;
    document.getElementById('avatarPreview').textContent = emoji;
    
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –æ–ø—Ü–∏–π
    document.querySelectorAll('.avatar-option').forEach(option => {
        option.classList.remove('selected');
    });
    
    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
    event.target.classList.add('selected');
}

function uploadAvatar() {
    // –°–æ–∑–¥–∞—ë–º —Å–∫—Ä—ã—Ç—ã–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    input.style.display = 'none';
    
    input.onchange = async (e) => {
        const file = e.target.files[0];
        if (!file) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 5MB)
        if (file.size > 5 * 1024 * 1024) {
            showAlert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º 5MB');
            return;
        }
        
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ Data URL
        const reader = new FileReader();
        reader.onload = (event) => {
            const avatarUrl = event.target.result;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            const preview = document.getElementById('avatarPreview');
            preview.innerHTML = `<img src="${avatarUrl}" style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">`;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            appData.selectedAvatar = 'custom';
            appData.selectedAvatarUrl = avatarUrl;
            
            showAlert('–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É"');
        };
        reader.readAsDataURL(file);
    };
    
    document.body.appendChild(input);
    input.click();
    document.body.removeChild(input);
}

async function saveAvatar() {
    try {
        if (appData.currentUser) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–≤–∞—Ç–∞—Ä–∫–∏
            if (appData.selectedAvatar === 'custom' && appData.selectedAvatarUrl) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º custom —Ñ–æ—Ç–æ
                appData.currentUser.avatar = 'custom';
                appData.currentUser.customAvatarUrl = appData.selectedAvatarUrl;
                
                await API.updateUser(appData.currentUser.id, { 
                    avatar: 'custom',
                    telegramAvatarUrl: appData.selectedAvatarUrl // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ –ë–î
                });
            } else {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–æ–¥–∑–∏
                appData.currentUser.avatar = appData.selectedAvatar;
                
                await API.updateUser(appData.currentUser.id, { avatar: appData.selectedAvatar });
            }
            
            await initializeData();
            
            closeModal('avatarModal');
            loadUserData();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            addActivity('üñºÔ∏è', '–í—ã –æ–±–Ω–æ–≤–∏–ª–∏ —Å–≤–æ—é –∞–≤–∞—Ç–∞—Ä–∫—É');
            
            showAlert('–ê–≤–∞—Ç–∞—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
        showAlert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏');
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
async function finishTournament(tournamentId) {
    if (!appData.isAdmin) return;
    
    try {
        await API.updateTournamentStatus(tournamentId, 'finished');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
        appData.tournaments = await API.getTournaments();
        
        renderTournaments();
        
        const tournament = appData.tournaments.find(t => t.id === tournamentId);
        showAlert(`–¢—É—Ä–Ω–∏—Ä "${tournament.name}" –∑–∞–≤–µ—Ä—à–µ–Ω!`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', error);
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –≤—Ä–µ–º—è" –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
function switchRatingPeriod(period) {
    document.querySelectorAll('.period-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    loadRating();
}

// –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ª–µ–Ω—Ç—É
function addActivity(icon, text) {
    const activityList = document.getElementById('activityList');
    const activityItem = document.createElement('div');
    activityItem.className = 'activity-item';
    activityItem.style.animation = 'slideIn 0.4s ease-out';
    
    const now = new Date();
    const timeString = now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    
    activityItem.innerHTML = `
        <div class="activity-icon">${icon}</div>
        <div class="activity-text">${text}</div>
        <div class="activity-time">${timeString}</div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    activityList.insertBefore(activityItem, activityList.firstChild);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    while (activityList.children.length > 5) {
        activityList.removeChild(activityList.lastChild);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
async function showActivePlayers() {
    try {
        const users = await API.getUsers();
        const tournaments = await API.getTournaments();
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö
        const activeTournaments = tournaments.filter(t => t.status === 'active');
        const activePlayerIds = new Set();
        
        activeTournaments.forEach(tournament => {
            tournament.participants.forEach(participant => {
                activePlayerIds.add(participant.id);
            });
        });
        
        const activePlayers = users.filter(user => activePlayerIds.has(user.id));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ —Å–ø–∏—Å–∫–æ–º
        const modal = document.getElementById('usersListModal');
        const modalTitle = modal.querySelector('.modal-header h2');
        const usersList = document.getElementById('usersList');
        
        modalTitle.textContent = `–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ (${activePlayers.length})`;
        
        if (activePlayers.length === 0) {
            usersList.innerHTML = `
                <div style="text-align: center; padding: 40px 20px; color: #7f8c8d;">
                    <div style="font-size: 48px; margin-bottom: 16px;">üéÆ</div>
                    <p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤</p>
                    <p style="font-size: 14px; margin-top: 8px;">–ò–≥—Ä–æ–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º</p>
                </div>
            `;
        } else {
            usersList.innerHTML = activePlayers.map((user, index) => `
                <div class="user-item" onclick="showUserProfile(${user.id})" style="animation: fadeIn 0.3s ease-out ${index * 0.05}s both;">
                    <div class="user-avatar">${user.avatar || user.telegramAvatarUrl || 'üë§'}</div>
                    <div class="user-info">
                        <div class="user-name">${user.gameNickname || user.telegramName}</div>
                        <div class="user-stats">${user.stats.points} –æ—á–∫–æ–≤</div>
                    </div>
                    <div class="user-rank-badge">
                        <div class="rank-icon">üéØ</div>
                        <div class="rank-text">–ê–∫—Ç–∏–≤–µ–Ω</div>
                    </div>
                </div>
            `).join('');
        }
        
        modal.style.display = 'flex';
        setTimeout(() => modal.classList.add('show'), 10);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:', error);
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initApp();
    applyTheme();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
tg.onEvent('themeChanged', applyTheme);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
tg.onEvent('viewportChanged', function() {
    console.log('–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è');
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.joinTournament = joinTournament;
window.switchTab = switchTab;
window.filterTournaments = filterTournaments;
window.showTournamentParticipants = showTournamentParticipants;
window.showUserProfile = showUserProfile;
window.showAddTournamentModal = showAddTournamentModal;
window.createTournament = createTournament;
window.showUsersList = showUsersList;
window.showTournamentsManagement = showTournamentsManagement;
window.closeModal = closeModal;
window.loginAsUser = loginAsUser;
window.loginAsAdmin = loginAsAdmin;
window.registerUser = registerUser;
window.logout = logout;
window.showAvatarModal = showAvatarModal;
window.selectEmojiAvatar = selectEmojiAvatar;
window.uploadAvatar = uploadAvatar;
window.saveAvatar = saveAvatar;
window.finishTournament = finishTournament;
window.switchRatingPeriod = switchRatingPeriod;
window.showActivePlayers = showActivePlayers;
window.addActivity = addActivity;
window.toggleTheme = toggleTheme;
window.updateThemeIcon = updateThemeIcon;

// ============================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ì–† –ò –¢–£–†–ù–ò–†–û–í V2.0
// ============================================

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä
async function loadGames() {
    try {
        console.log('üéÆ –ó–∞–≥—Ä—É–∂–∞—é –∏–≥—Ä—ã —Å —Å–µ—Ä–≤–µ—Ä–∞...');
        const games = await API.getGames();
        console.log('‚úÖ –ò–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', games.length);
        displayGames(games);
        loadMyTournamentStanding();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä:', error);
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä: ' + error.message);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä
function displayGames(games) {
    const gamesList = document.getElementById('gamesList');
    if (!gamesList) return;

    if (games.length === 0) {
        gamesList.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üéÆ</div>
                <h3>–ù–µ—Ç –∏–≥—Ä</h3>
                <p>–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä</p>
            </div>
        `;
        return;
    }

    gamesList.innerHTML = games.map(game => createGameCard(game)).join('');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä—ã
function createGameCard(game) {
    const gameDate = new Date(game.date);
    const now = new Date();
    const isUpcoming = gameDate > now;
    const isToday = gameDate.toDateString() === now.toDateString();
    
    const statusText = {
        'upcoming': '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è',
        'in_progress': '–ò–¥—ë—Ç —Å–µ–π—á–∞—Å',
        'finished': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
    }[game.status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    const statusClass = game.status;

    return `
        <div class="game-card" data-game-id="${game.id}">
            <div class="game-header">
                <div>
                    <div class="game-title">–ò–≥—Ä–∞ #${game.game_number}</div>
                    <div class="game-tournament">${game.tournament_name || '–¢—É—Ä–Ω–∏—Ä'}</div>
                </div>
                <div class="game-status ${statusClass}">${statusText}</div>
            </div>
            
            <div class="game-info">
                <div class="game-info-item">
                    <div class="game-info-icon">üìÖ</div>
                    <div class="game-info-label">–î–∞—Ç–∞</div>
                    <div class="game-info-value">${formatGameDate(gameDate)}</div>
                </div>
                <div class="game-info-item">
                    <div class="game-info-icon">üë•</div>
                    <div class="game-info-label">–£—á–∞—Å—Ç–Ω–∏–∫–∏</div>
                    <div class="game-info-value">${game.registeredCount || 0}/${game.max_players}</div>
                </div>
                <div class="game-info-item">
                    <div class="game-info-icon">üí∞</div>
                    <div class="game-info-label">Buy-in</div>
                    <div class="game-info-value">${game.buyin_amount || 1500}‚ÇΩ</div>
                </div>
                <div class="game-info-item">
                    <div class="game-info-icon">üí≥</div>
                    <div class="game-info-label">–û–ø–ª–∞—á–µ–Ω–æ</div>
                    <div class="game-info-value">${game.paidCount || 0}</div>
                </div>
            </div>

            <div class="game-participants">
                <div class="participants-avatars" id="participants-${game.id}">
                    <!-- –ê–≤–∞—Ç–∞—Ä—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ -->
                </div>
                <div class="participants-count">${game.registeredCount || 0} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</div>
            </div>

            <div class="game-actions">
                ${createGameActions(game)}
            </div>
        </div>
    `;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∏–≥—Ä—ã
function createGameActions(game) {
    const gameDate = new Date(game.date);
    const now = new Date();
    const isUpcoming = gameDate > now;
    const isRegistered = game.participants?.some(p => p.id === appData.currentUser?.id);
    const isAdmin = appData.isAdmin;

    let actions = '';

    if (isUpcoming) {
        if (isRegistered) {
            actions += `
                <button class="game-btn danger" onclick="cancelGameRegistration(${game.id})">
                    <i class="fas fa-times"></i>
                    <span>–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å</span>
                </button>
            `;
        } else {
            actions += `
                <button class="game-btn primary" onclick="registerForGame(${game.id})">
                    <i class="fas fa-plus"></i>
                    <span>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è</span>
                </button>
            `;
        }
    }

    if (isAdmin) {
        if (game.status === 'upcoming') {
            actions += `
                <button class="game-btn secondary" onclick="showGameDetails(${game.id})">
                    <i class="fas fa-eye"></i>
                    <span>–î–µ—Ç–∞–ª–∏</span>
                </button>
            `;
        }
        
        if (game.status === 'finished') {
            actions += `
                <button class="game-btn secondary" onclick="showGameResults(${game.id})">
                    <i class="fas fa-trophy"></i>
                    <span>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</span>
                </button>
            `;
        }
    }

    return actions;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏–≥—Ä—ã
function formatGameDate(date) {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const gameDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());
    
    if (gameDate.getTime() === today.getTime()) {
        return `–°–µ–≥–æ–¥–Ω—è ${date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
    } else if (gameDate.getTime() === today.getTime() + 24 * 60 * 60 * 1000) {
        return `–ó–∞–≤—Ç—Ä–∞ ${date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
    } else {
        return date.toLocaleDateString('ru-RU', { 
            day: '2-digit', 
            month: '2-digit', 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    }
}

// –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É
async function registerForGame(gameId) {
    try {
        if (!appData.currentUser) {
            showAlert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
            return;
        }

        await API.registerForGame(gameId, appData.currentUser.id);
        showAlert('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É!');
        addActivity('üéÆ', '–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É');
        loadGames();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—É:', error);
        showAlert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –∏–≥—Ä—É
async function cancelGameRegistration(gameId) {
    try {
        if (!appData.currentUser) {
            showAlert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
            return;
        }

        const result = await API.cancelGameRegistration(gameId, appData.currentUser.id);
        
        if (result.penalty) {
            showAlert(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü—Ä–∏–º–µ–Ω—ë–Ω —à—Ç—Ä–∞—Ñ -${result.pointsDeducted} –æ—á–∫–æ–≤ –∑–∞ –ø–æ–∑–¥–Ω—é—é –æ—Ç–º–µ–Ω—É`);
            addActivity('‚ö†Ô∏è', `–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ —Å —à—Ç—Ä–∞—Ñ–æ–º -${result.pointsDeducted} –æ—á–∫–æ–≤`);
        } else {
            showAlert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞');
            addActivity('‚úÖ', '–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—É');
        }
        
        loadGames();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏:', error);
        showAlert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã
async function showGameDetails(gameId) {
    try {
        const game = await API.getGame(gameId);
        const modal = document.getElementById('gameDetailsModal');
        const title = document.getElementById('gameDetailsTitle');
        const details = document.getElementById('gameDetails');

        title.textContent = `–ò–≥—Ä–∞ #${game.game_number}`;
        
        details.innerHTML = `
            <div class="game-details-content">
                <div class="game-detail-item">
                    <strong>–¢—É—Ä–Ω–∏—Ä:</strong> ${game.tournament_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                </div>
                <div class="game-detail-item">
                    <strong>–î–∞—Ç–∞:</strong> ${formatGameDate(new Date(game.date))}
                </div>
                <div class="game-detail-item">
                    <strong>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</strong> ${game.registeredCount || 0}/${game.max_players}
                </div>
                <div class="game-detail-item">
                    <strong>Buy-in:</strong> ${game.buyin_amount || 1500}‚ÇΩ
                </div>
                <div class="game-detail-item">
                    <strong>–û–ø–ª–∞—á–µ–Ω–æ:</strong> ${game.paidCount || 0}
                </div>
                
                ${game.participants && game.participants.length > 0 ? `
                    <div class="participants-section">
                        <h4>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</h4>
                        <div class="participants-list">
                            ${game.participants.map(p => `
                                <div class="participant-item">
                                    <div class="participant-avatar">${p.avatar}</div>
                                    <div class="participant-name">${p.game_nickname}</div>
                                    <div class="participant-status ${p.is_paid ? 'paid' : 'unpaid'}">
                                        ${p.is_paid ? '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ' : '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'}
                                    </div>
                                    ${appData.isAdmin ? `
                                        <button class="payment-btn" onclick="togglePayment(${gameId}, ${p.id}, ${!p.is_paid})">
                                            ${p.is_paid ? '–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É' : '–û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É'}
                                        </button>
                                    ` : ''}
                                </div>
                            `).join('')}
                        </div>
                    </div>
                ` : ''}
            </div>
        `;

        modal.style.display = 'flex';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∏–≥—Ä—ã:', error);
        showAlert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
async function togglePayment(gameId, userId, isPaid) {
    try {
        await API.markGamePayment(gameId, userId, isPaid);
        showAlert(`–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª—ë–Ω`);
        showGameDetails(gameId); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:', error);
        showAlert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã
async function showGameResults(gameId) {
    try {
        const results = await API.getGameResults(gameId);
        const modal = document.getElementById('gameResultsModal');
        const form = document.getElementById('resultsForm');

        form.innerHTML = `
            <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã</h3>
            <div class="results-list">
                ${results.map((result, index) => `
                    <div class="result-item">
                        <div class="result-avatar">${result.avatar}</div>
                        <div class="result-name">${result.game_nickname}</div>
                        <div class="result-place">
                            <span>–ú–µ—Å—Ç–æ:</span>
                            <input type="number" value="${result.place}" min="1" max="30" 
                                   onchange="updateResultPoints(${result.id}, this.value)">
                        </div>
                        <div class="result-points">${result.points_earned} –æ—á–∫–æ–≤</div>
                    </div>
                `).join('')}
            </div>
        `;

        modal.style.display = 'flex';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
        showAlert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å –æ—á–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–µ—Å—Ç–∞
function updateResultPoints(resultId, place) {
    const points = calculatePoints(parseInt(place));
    const resultItem = event.target.closest('.result-item');
    const pointsElement = resultItem.querySelector('.result-points');
    pointsElement.textContent = `${points} –æ—á–∫–æ–≤`;
}

// –†–∞—Å—á—ë—Ç –æ—á–∫–æ–≤ –ø–æ –º–µ—Å—Ç—É
function calculatePoints(place) {
    const pointsSystem = {
        1: 300, 2: 240, 3: 195, 4: 150, 5: 150,
        6: 90, 7: 90, 8: 90, 9: 90, 10: 90
    };
    return pointsSystem[place] || 30;
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ—é –ø–æ–∑–∏—Ü–∏—é –≤ —Ç—É—Ä–Ω–∏—Ä–µ
async function loadMyTournamentStanding() {
    try {
        if (!appData.currentUser) return;

        const tournaments = await API.getActiveTournaments();
        if (tournaments.length === 0) return;

        const tournament = tournaments[0]; // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
        const standing = await API.getMyTournamentStanding(tournament.id, appData.currentUser.id);
        
        const container = document.getElementById('myTournamentStanding');
        if (!container) return;

        document.getElementById('myPosition').textContent = standing.position || '-';
        document.getElementById('myPoints').textContent = standing.totalPoints || 0;
        document.getElementById('myGames').textContent = standing.gamesPlayed || 0;
        
        const statusElement = document.getElementById('myStatus');
        if (standing.inGrandFinal) {
            statusElement.innerHTML = '<span class="status-badge">‚úÖ –í —Ñ–∏–Ω–∞–ª–µ</span>';
        } else {
            const pointsToTop20 = standing.pointsToTop20 || 0;
            statusElement.innerHTML = `<span class="status-badge">‚ùå –ù—É–∂–Ω–æ ${pointsToTop20} –æ—á–∫–æ–≤ –¥–æ —Ç–æ–ø-20</span>`;
        }

        container.style.display = 'block';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–∏:', error);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
async function showTournamentStandings(tournamentId) {
    try {
        const standings = await API.getTournamentStandings(tournamentId);
        const modal = document.getElementById('tournamentStandingsModal');
        const title = document.getElementById('standingsTitle');
        const list = document.getElementById('standingsList');

        title.textContent = '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞';
        
        list.innerHTML = standings.map((standing, index) => `
            <div class="standings-item ${index < 3 ? 'top3' : index < 20 ? 'top20' : ''}">
                <div class="standings-rank">${standing.position}</div>
                <div class="standings-player">
                    <div class="standings-avatar">${standing.avatar}</div>
                    <div class="standings-name">${standing.game_nickname}</div>
                </div>
                <div class="standings-stats">
                    <div class="standings-points">${standing.total_points} –æ—á–∫–æ–≤</div>
                    <div class="standings-games">${standing.games_played} –∏–≥—Ä</div>
                </div>
            </div>
        `).join('');

        modal.style.display = 'flex';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
        showAlert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É (–∞–¥–º–∏–Ω)
async function showAddGameModal() {
    try {
        const tournaments = await API.getActiveTournaments();
        const select = document.getElementById('gameTournament');
        
        select.innerHTML = tournaments.map(t => 
            `<option value="${t.id}">${t.name}</option>`
        ).join('');

        const modal = document.getElementById('addGameModal');
        modal.style.display = 'flex';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', error);
        showAlert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É
async function createGame() {
    try {
        const tournamentId = document.getElementById('gameTournament').value;
        const gameNumber = document.getElementById('gameNumber').value;
        const date = document.getElementById('gameDate').value;
        const maxPlayers = document.getElementById('gameMaxPlayers').value;
        const buyin = document.getElementById('gameBuyin').value;

        if (!tournamentId || !gameNumber || !date) {
            showAlert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }

        await API.createGame({
            tournamentId: parseInt(tournamentId),
            gameNumber: parseInt(gameNumber),
            date: new Date(date).toISOString(),
            maxPlayers: parseInt(maxPlayers),
            buyinAmount: parseInt(buyin)
        });

        showAlert('–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        closeModal('addGameModal');
        loadGames();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:', error);
        showAlert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.TelegramApp = {
    showAlert,
    vibrate,
    tg,
    appData
};

// –≠–∫—Å–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏–≥—Ä
window.registerForGame = registerForGame;
window.cancelGameRegistration = cancelGameRegistration;
window.showGameDetails = showGameDetails;
window.togglePayment = togglePayment;
window.showGameResults = showGameResults;
window.showTournamentStandings = showTournamentStandings;
window.showAddGameModal = showAddGameModal;
window.createGame = createGame;
window.loadGames = loadGames;